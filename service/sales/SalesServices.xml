<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="create" noun="Task">
        <in-parameters>
            <parameter name="workEffortId"><matches regexp="[A-Za-z0-9]{1,8}"
                    message="Task ID must be only letters and digits and between 1 and 8 characters long"/></parameter>
            <auto-parameters entity-name="mantle.work.effort.WorkEffort" include="nonpk"/>
            <parameter name="workEffortName" required="true"/>
            <parameter name="estimatedStartDate" type="Timestamp" format="yyyy-MM-dd"/>
            <parameter name="estimatedCompletionDate" type="Timestamp" format="yyyy-MM-dd"/>
            <parameter name="workEffortTypeEnumId" default-value="WetTask"/>
            <parameter name="statusId" default-value="WeInPlanning"/>
            <parameter name="description"/>

            <parameter name="accountPartyId" required="true"/>

            <parameter name="assignToPartyId"/>
            <parameter name="assignRoleTypeId" default-value="Assignee"/>
            <parameter name="assignStatusId" default-value="WeptAssigned"/>
            <parameter name="salesOpportunityId"/>
        </in-parameters>
        <out-parameters><parameter name="workEffortId"/></out-parameters>
        <actions>
            <if condition="estimatedStartDate != null &amp;&amp; estimatedCompletionDate != null &amp;&amp;
                           estimatedCompletionDate &lt; estimatedStartDate">
                <return error="true" message="Date range is not valid."/>
            </if>
            <service-call name="create#mantle.work.effort.WorkEffort" out-map="context" in-map="context"/>
            <if condition="ec.user.userAccount?.partyId">
                <service-call name="create#mantle.work.effort.WorkEffortParty"
                              in-map="[workEffortId:workEffortId, partyId:ec.user.userAccount.partyId,
                            roleTypeId:'Assignee', fromDate:ec.user.nowTimestamp, statusId:'WeptAssigned']"/>
            </if>
            <!-- May need to put an if statement around this and NOT relate to customer if it is for an opportunity.
              The reason is because if the sales account were changed on the opportunity then these work efforts would be wrong. -->
            <service-call name="create#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId,
                        partyId:accountPartyId, roleTypeId:'Customer', fromDate:ec.user.nowTimestamp]"/>
            <if condition="assignToPartyId">
                <service-call name="create#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId, partyId:assignToPartyId,
                        roleTypeId:'assignRoleTypeId', fromDate:ec.user.nowTimestamp, statusId:assignStatusId]"/>
            </if>
            <!-- Add in parameter for salesOpportunityId. If exists, call service to create SalesOpportunityWorkEffort -->
            <if condition="salesOpportunityId">
                <service-call name="create#mantle.sales.opportunity.SalesOpportunityWorkEffort"
                              in-map="[workEffortId:workEffortId,salesOpportunityId:salesOpportunityId]"/>
            </if>
        </actions>
    </service>
    <!-- TODO: Refactor. This service is copied from WorkEffort services so it does more than required in the Sales component. -->
    <service verb="update" noun="Task">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <auto-parameters entity-name="mantle.work.effort.WorkEffort" include="nonpk">
                <exclude field-name="rootWorkEffortId"/></auto-parameters>
            <parameter name="estimatedStartDate" type="Timestamp" format="yyyy-MM-dd"/>
            <parameter name="estimatedCompletionDate" type="Timestamp" format="yyyy-MM-dd"/>

            <parameter name="clientPartyId"/>
            <parameter name="clientBillingPartyId"/>
            <parameter name="clientManagerPartyId"/>
            <parameter name="vendorPartyId"/>
            <parameter name="managerPartyId"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.work.effort.WorkEffort" list="tasksList">
                <econdition field-name="rootWorkEffortId" from="workEffortId"/>
            </entity-find>
            <if condition="estimatedStartDate != null &amp;&amp; estimatedCompletionDate != null &amp;&amp;
                           estimatedCompletionDate &lt; estimatedStartDate">
                <return error="true" message="Project date range is not valid."/>
            </if>
            <iterate list="tasksList" entry="task">
                <if condition="estimatedStartDate &amp;&amp; task.actualStartDate &amp;&amp; estimatedStartDate &gt; task.actualStartDate">
                    <return error="true" message="Project's new start date puts one or more tasks out of date range."/>
                </if>
                <if condition="estimatedCompletionDate &amp;&amp; task.actualStartDate &amp;&amp; estimatedCompletionDate &lt; task.actualStartDate">
                    <return error="true" message="Project's new end date puts one or more tasks out of date range."/>
                </if>
            </iterate>
            <if condition="!taskList">
                <entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList">
                    <econdition field-name="workEffortId"/>
                </entity-find>
                <iterate list="timeEntryList" entry="timeEntry">
                    <if condition="estimatedStartDate &amp;&amp; timeEntry.fromDate &amp;&amp; estimatedStartDate &gt; timeEntry.fromDate">
                        <return error="true" message="Project's new start date puts one or more time entries out of date range."/>
                    </if>
                    <if condition="estimatedCompletionDate &amp;&amp; timeEntry.fromDate &amp;&amp; estimatedCompletionDate &lt; timeEntry.fromDate">
                        <return error="true" message="Project's new end date puts one or more time entries out of date range."/>
                    </if>
                </iterate>
            </if>
            <service-call name="update#mantle.work.effort.WorkEffort" out-map="context" in-map="context"/>

            <if condition="clientPartyId">
                <service-call name="mantle.work.WorkEffortServices.replace#WorkEffortParty"
                        in-map="[workEffortId:workEffortId, roleTypeId:'Customer', newPartyId:clientPartyId]"/>
            </if>
            <if condition="clientBillingPartyId">
                <service-call name="mantle.work.WorkEffortServices.replace#WorkEffortParty"
                        in-map="[workEffortId:workEffortId, roleTypeId:'ClientBilling',newPartyId:clientBillingPartyId, statusId:'WeptAssigned']"/>
            </if>
            <if condition="clientManagerPartyId">
                <service-call name="mantle.work.WorkEffortServices.replace#WorkEffortParty"
                        in-map="[workEffortId:workEffortId, roleTypeId:'ClientManager', newPartyId:clientManagerPartyId, statusId:'WeptAssigned']"/>
            </if>
            <if condition="vendorPartyId">
                <service-call name="mantle.work.WorkEffortServices.replace#WorkEffortParty"
                        in-map="[workEffortId:workEffortId, roleTypeId:'Vendor', newPartyId:vendorPartyId, statusId:'WeptAssigned']"/>
            </if>
            <if condition="managerPartyId">
                <service-call name="mantle.work.WorkEffortServices.replace#WorkEffortParty"
                        in-map="[workEffortId:workEffortId, roleTypeId:'Manager', newPartyId:managerPartyId, statusId:'WeptAssigned']"/>
            </if>
        </actions>
    </service>
    <service verb="get" noun="BlogPosts">
        <in-parameters>
            <parameter name="wikiSpaceId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="blogList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="moqui.resource.wiki.WikiBlogFindView" list="blogList">
                <search-form-inputs default-order-by="-publishDate"/>
                <select-field field-name="wikiBlogId,wikiPageId,wikiSpaceId,pagePath,author,publishDate,title,summary,metaKeywords"/>
            </entity-find>
        </actions>
    </service>
    <service verb="get" noun="PublishedWikiPageText">
        <in-parameters>
            <parameter name="wikiSpaceId" required="true"/>
            <parameter name="pagePath" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="pageText"/>
        </out-parameters>
        <actions>
            <service-call name="org.moqui.impl.WikiServices.get#PublishedWikiPageText" out-map="wikiPage">
                <field-map field-name="wikiSpaceId" from="wikiSpaceId"/>
                <field-map field-name="pagePath" from="pagePath"/>
            </service-call>
            <set field="pageText" from="wikiPage.pageText"/>
        </actions>
    </service>
    <service verb="create" noun="Opportunity">
        <in-parameters>
            <parameter name="accountPartyId"/>
            <parameter name="partyId"/>
            <parameter name="opportunityName"/>
            <parameter name="currencyUomId"/>
            <parameter name="estimatedAmount"/>
            <parameter name="estimatedCloseDate"/>
            <parameter name="description"/>
        </in-parameters>
        <out-parameters>
            <parameter name="salesOpportunityId"/>
        </out-parameters>
        <actions>
            <!-- create Opportunity and Assign Sales Person -->
            <service-call name="create#mantle.sales.opportunity.SalesOpportunity" in-map="context" out-map="newSalesOpportunityOut"/>
            <set field="salesOpportunityId" from="newSalesOpportunityOut.salesOpportunityId"/>
            <if condition="partyId">
                <service-call name="create#mantle.sales.opportunity.SalesOpportunityParty" in-map="context + [roleTypeId:'SalesRepresentative']"/>
            </if>
        </actions>
    </service>
    <service verb="search" noun="Party"><description>This is a copy of search#Party for PartyServices.
        The parameter "fromPartyId" is added so you can filter for a specific sales person.
        This also depends on the toRelationships that were added to the out of the box dataDocuments definition.</description>
        <in-parameters>
            <parameter name="searchPartyIndexName" default-value="mantle_party"/>
            <parameter name="searchPartyDocType" default-value="MantleParty"/>
            <parameter name="anyField"/>

            <parameter name="roleTypeId"/><parameter name="partyClassificationId"/>
            <parameter name="pseudoId"/><parameter name="idValue"/><parameter name="gatewayCimId"/>
            <parameter name="disabled"/><parameter name="hasDuplicates"/>
            <parameter name="customerStatusId"/><parameter name="partyTypeEnumId"/>
            <parameter name="username"/>

            <parameter name="combinedName"/><parameter name="organizationName"/>
            <parameter name="firstName"/><parameter name="lastName"/>

            <parameter name="infoString"/>
            <parameter name="areaCode"/><parameter name="contactNumber"/>
            <parameter name="address1"/><parameter name="address2"/><parameter name="unitNumber"/>
            <parameter name="city"/><parameter name="stateProvinceGeoId"/><parameter name="postalCode"/>

            <parameter name="orderByField"/>
            <parameter name="pageIndex" type="Integer" default="0"/>
            <parameter name="pageSize" type="Integer" default="20"/>
            <parameter name="pageNoLimit" type="Boolean" default="false"/>

            <parameter name="fromPartyId"/> <!-- Sales Person -->
        </in-parameters>
        <out-parameters>
            <parameter name="queryString"/>
            <parameter name="documentList" type="List"><parameter name="document" type="Map"/></parameter>
            <parameter name="documentListCount" type="Integer"/>
            <parameter name="documentListPageIndex" type="Integer"/>
            <parameter name="documentListPageSize" type="Integer"/>
            <parameter name="documentListPageMaxIndex" type="Integer"/>
            <parameter name="documentListPageRangeLow" type="Integer"/>
            <parameter name="documentListPageRangeHigh" type="Integer"/>
        </out-parameters>
        <actions>
            <set field="indexName" from="searchPartyIndexName ?: 'mantle_party'"/>
            <set field="documentType" from="searchPartyDocType ?: 'MantleParty'"/>
            <!-- <set field="orderByField" from="orderByField ?: 'combinedName'"/> -->
            <set field="nestedQueryMap" from="[:]"/>
            <set field="nowTimeLong" from="System.currentTimeMillis()"/>

            <!-- auto prefix with '*:' so that highlighting works -->
            <set field="queryString" from="anyField ? elasticQueryAutoWildcard(anyField, true) : ''"/>

            <if condition="queryString"><set field="queryString" from="'(' + queryString + ')'"/></if>

            <if condition="roleTypeId">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'roles.roleTypeId:' + roleTypeId"/></if>
            <if condition="fromPartyId"> <!-- Filter on sales person -->
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'toRelationships.fromPartyId:' + fromPartyId"/></if>
            <if condition="partyClassificationId">
                <set field="nestedQueryMap.classifications" from="[bool:[filter:[
                        [term:['classifications.partyClassificationId':partyClassificationId]],
                        [range:['classifications.classFromDate':[lte:nowTimeLong]]]
                    ], should:[
                        [range:['classifications.classThruDate':[gte:nowTimeLong]]],
                        [bool:[must_not:[exists:[field:'classifications.classThruDate']]]]
                    ], minimum_should_match:1]]"/>
                <if condition="!queryString"><set field="queryString" value="*:*"/></if>
                <!-- <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'classifications.partyClassificationId:' + partyClassificationId"/> -->
            </if>

            <if condition="pseudoId">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'pseudoId:' + pseudoId + '*'"/></if>
            <if condition="idValue">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'identifications.idValue:' + idValue + '*'"/></if>
            <if condition="gatewayCimId">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'gatewayCimId:' + gatewayCimId + '*'"/></if>

            <if condition="username">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'userAccounts.username:' + username + '*'"/></if>
            <if condition="disabled">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'disabled:' + disabled"/></if>
            <if condition="hasDuplicates">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'hasDuplicates:' + hasDuplicates"/></if>

            <if condition="combinedName">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'combinedName:*' + combinedName + '*'"/></if>
            <if condition="organizationName">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'organizationName:' + organizationName + '*'"/></if>
            <if condition="firstName">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'firstName:' + firstName + '*'"/></if>
            <if condition="lastName">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'lastName:' + lastName + '*'"/></if>

            <if condition="infoString">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'contactMechs.infoString:' + infoString + '*'"/></if>
            <if condition="areaCode">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'contactMechs.areaCode:' + areaCode + '*'"/></if>
            <if condition="contactNumber">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'contactMechs.contactNumber:' + contactNumber + '*'"/></if>

            <if condition="address1">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'contactMechs.address1:*' + address1 + '*'"/></if>
            <if condition="address2">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'contactMechs.address2:*' + address2 + '*'"/></if>
            <if condition="unitNumber">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'contactMechs.unitNumber:*' + unitNumber + '*'"/></if>
            <if condition="city">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'contactMechs.city:' + city + '*'"/></if>
            <if condition="stateProvinceGeoId">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'contactMechs.stateProvinceGeoId:' + stateProvinceGeoId"/></if>
            <if condition="postalCode">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'contactMechs.postalCode:' + postalCode + '*'"/></if>
            <if condition="customerStatusId">
                <if condition="customerStatusId == '_exists_'">
                    <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + '_exists_:customerStatusId'"/>
                    <else>
                        <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'customerStatusId:' + customerStatusId + '*'"/>
                    </else>
                </if>
            </if>
            <if condition="partyTypeEnumId">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'partyTypeEnumId:' + partyTypeEnumId + '*'"/></if>

            <!-- if we have activeOrgId or filterOrgIds see if user has active org or user org filters -->
            <set field="activeOrgId" from="ec.user.context?.activeOrgId"/>
            <set field="filterOrgIds" from="ec.user.context?.filterOrgIds"/>
            <!-- NOTE: using entityFilterSetId is a hack that only works for these 'standard' filter sets, would be
                better to pick apart filterMap to see what's used, but this is specific to activeOrgId and filterOrgIds anyway -->
            <set field="findFilters" from="ec.artifactExecution.getFindFiltersForUser('mantle.party.Party')"/>
            <if condition="findFilters"><set field="entityFilterSetId" from="findFilters[0].entityFilterSetId"/></if>
            <!-- <log level="warn" message="Doing party search with activeOrgId ${activeOrgId} filterOrgIds ${filterOrgIds} entityFilterSetId ${entityFilterSetId}"/> -->
            <script><![CDATA[
                if (queryString) {
                    if ('MANTLE_USER_ORG'.equals(entityFilterSetId)) {
                        queryString = (queryString ? queryString + ' AND ' : '' ) + 'ownerPartyId:(' + (filterOrgIds ? filterOrgIds.join(' OR ') + ' OR ' : '') + '_NA_)'
                    } else if ('MANTLE_ACTIVE_ORG'.equals(entityFilterSetId) && activeOrgId) {
                        queryString = (queryString ? queryString + ' AND ' : '' ) + 'ownerPartyId:(' + activeOrgId + ' OR _NA_)'
                    }
                }
            ]]></script>

            <set field="orderByFields" from="orderByField ? [orderByField.replace('combinedName', 'combinedName.keyword').replace('username', 'userAccounts.username.keyword')] : null"/>
            <set field="highlightFields" from="['roles.roleTypeId', 'classifications.class', 'pseudoId',
                    'identifications.idValue', 'combinedName', 'firstName', 'lastName', 'organizationName', 'userAccounts.username',
                    'contactMech.infoString', 'contactMechs.address1', 'contactMechs.unitNumber', 'contactMechs.postalCode',
                    'contactMechs.city', 'contactMechs.state', 'contactMechs.areaCode', 'contactMechs.contactNumber', 'contactMechs.city']"/>
            <!-- <log level="warn" message="Product search queryString: ${queryString}"/> -->
            <if condition="queryString">
                <service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="context"
                              in-map="[indexName:indexName, documentType:documentType, queryString:queryString, flattenDocument:false,
                             orderByFields:orderByFields, highlightFields:highlightFields, nestedQueryMap:nestedQueryMap,
                             pageIndex:pageIndex, pageSize:pageSize, pageNoLimit:pageNoLimit]"/>
            </if>
        </actions>
    </service>

    <service verb="search" noun="Opportunity">
        <in-parameters>
            <parameter name="anyField"/>
            <parameter name="accountPartyId"/>
            <parameter name="name"/>
            <parameter name="partyId"/>
            <parameter name="orderByField"/>
            <parameter name="pageIndex" type="Integer" default="0"/>
            <parameter name="pageSize" type="Integer" default="20"/>
            <parameter name="pageNoLimit" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="queryString"/>
            <parameter name="documentList" type="List"><parameter name="document" type="Map"/></parameter>
            <parameter name="documentListCount" type="Integer"/>
            <parameter name="documentListPageIndex" type="Integer"/>
            <parameter name="documentListPageSize" type="Integer"/>
            <parameter name="documentListPageMaxIndex" type="Integer"/>
            <parameter name="documentListPageRangeLow" type="Integer"/>
            <parameter name="documentListPageRangeHigh" type="Integer"/>
        </out-parameters>
        <actions>
            <set field="indexName" value="mantle_sales_oppy"/>
            <set field="documentType" value="MantleSalesOpportunity"/>
            <!-- Build the query string based on input parameters -->
            <if condition="accountPartyId">
                    <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'accountPartyId:' + accountPartyId"/>
            </if>
            <if condition="name">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'name:' + name"/>
            </if>
            <if condition="partyId">
                <set field="queryString" from="(queryString ? queryString + ' AND ' : '' ) + 'SalesOpportunityParty.partyId:' + partyId"/>
            </if>
            <!--<set field="queryString" value="*"/>-->
            <!-- The following is taken from search#Party to enforce org security -->
            <!-- if we have activeOrgId or filterOrgIds see if user has active org or user org filters -->
            <set field="activeOrgId" from="ec.user.context?.activeOrgId"/>
            <set field="filterOrgIds" from="ec.user.context?.filterOrgIds"/>
            <!-- NOTE: using entityFilterSetId is a hack that only works for these 'standard' filter sets, would be
                better to pick apart filterMap to see what's used, but this is specific to activeOrgId and filterOrgIds anyway -->
            <set field="findFilters" from="ec.artifactExecution.getFindFiltersForUser('mantle.party.Party')"/>
            <if condition="findFilters"><set field="entityFilterSetId" from="findFilters[0].entityFilterSetId"/></if>
            <script><![CDATA[
                if (queryString) {
                    if ('MANTLE_USER_ORG'.equals(entityFilterSetId)) {
                        queryString = (queryString ? queryString + ' AND ' : '' ) + 'ownerPartyId:(' + (filterOrgIds ? filterOrgIds.join(' OR ') + ' OR ' : '') + '_NA_)'
                    } else if ('MANTLE_ACTIVE_ORG'.equals(entityFilterSetId) && activeOrgId) {
                        queryString = (queryString ? queryString + ' AND ' : '' ) + 'ownerPartyId:(' + activeOrgId + ' OR _NA_)'
                    }
                }
            ]]></script>
            <if condition="!queryString"><set field="queryString" value="*:*"/></if>
                <!--<service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="context" in-map="context"/>-->
            <set field="orderByFields" from="orderByField ? [orderByField.replace('combinedName', 'combinedName.keyword').replace('username', 'userAccounts.username.keyword')] : null"/>

            <service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="context"
                              in-map="[indexName:indexName, documentType:documentType, queryString:queryString,orderByFields:orderByFields, highlightFields:highlightFields, nestedQueryMap:nestedQueryMap,
                             pageIndex:pageIndex, pageSize:pageSize, pageNoLimit:pageNoLimit]"/>
                <!-- The following call is taken from PartyServices search#Party.
                    The "flattenDocument:false" causes Sales Person (partyId) to not be displayed. Not sure why.
                <service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="context"
                              in-map="[indexName:indexName, documentType:documentType, queryString:queryString, flattenDocument:false,
                             orderByFields:orderByFields, highlightFields:highlightFields, nestedQueryMap:nestedQueryMap,
                             pageIndex:pageIndex, pageSize:pageSize, pageNoLimit:pageNoLimit]"/>
                -->
            <if condition="documentList">
                <iterate list="documentList" entry="doc">
                        <script>
                            doc.put("formatted_estimated_amount",ec.l10n.formatCurrency(doc.estimatedAmount ?: 0, doc?.currencyUomId))
                        </script>
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="find" noun="PartyDetail">
        <in-parameters>
            <parameter name="partyId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="party"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="party">
                <field-map field-name="partyId" from="partyId"/>
            </entity-find-one>
        </actions>
    </service>
    <service verb="find" noun="AllSalesPerson">
        <in-parameters>
            <parameter name="partyIdList" type="List" />
        </in-parameters>
        <out-parameters>
            <parameter name="spList"/>
        </out-parameters>
        <actions>
            <set field="partyIdSet" from="new HashSet()"/>
            <script>partyIdSet.addAll(partyIdList)</script>
            <entity-find entity-name="mantle.party.PartyDetail" list="spList">
                <econdition field-name="partyId" operator="in" from="partyIdList"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="SavedFinds">
        <in-parameters>
            <parameter name="formLocation" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="savedFindList"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="moqui.screen.form.FormListFindUserView" list="sfList">
                <econdition field-name="userId" from="ec.user.userId"/>
                <econdition field-name="formLocation" from="formLocation"/>
            </entity-find>
            <set field="savedFindList" from="[]"/>
            <if condition="sfList">
                <iterate list="sfList" entry="sf">
                    <set field="saved_find" from="new HashMap()"/>
                    <script>
                        saved_find.putAll(sf)
                        savedFindList.add(saved_find)
                    </script>
                    <entity-find entity-name="moqui.screen.form.FormListFindField" list="fieldList">
                        <econdition field-name="formListFindId" from="sf.formListFindId"/>
                    </entity-find>
                    <if condition="fieldList">
                        <script>
                            saved_find.put("fieldList",fieldList)
                        </script>
                    </if>
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="create" noun="SavedFinds">
        <in-parameters>
            <parameter name="description" required="true"/>
            <parameter name="formLocation" required="true"/>
            <parameter name="orderByField" />
            <parameter name="fieldName" />
            <parameter name="fieldValue" />
            <parameter name="fieldOperator" />
            <parameter name="fieldFrom" />
            <parameter name="fieldThru" />
        </in-parameters>
        <out-parameters>
            <parameter name="formListFindId"/>
        </out-parameters>
        <actions>
            <service-call name="create#moqui.screen.form.FormListFind"
                         out-map="context" in-map="[description:description, formLocation:formLocation, orderByField:orderByField]"/>
            <service-call name="create#moqui.screen.form.FormListFindUser"
                          in-map="[formListFindId:context.formListFindId, userId:ec.user.userId]"/>
        </actions>
    </service>
    <service verb="create" noun="SavedFindsFields">
        <in-parameters>
            <parameter name="formListFindId" required="true"/>
            <parameter name="fieldName" />
            <parameter name="fieldValue" />
            <parameter name="fieldOperator" />
            <parameter name="fieldFrom" />
            <parameter name="fieldThru" />
        </in-parameters>
        <out-parameters>
            <parameter name="formListFindId"/>
        </out-parameters>
        <actions>
            <service-call name="create#moqui.screen.form.FormListFindField"
                         out-map="context" in-map="[formListFindId:formListFindId, fieldName:fieldName, fieldValue:fieldValue,
                         fieldOperator:fieldOperator, fieldFrom:fieldFrom, fieldThru:fieldThru]"/>
        </actions>
    </service>
    <service verb="find" noun="PartyNoteList">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyNoteList"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyNote" list="tmpPartyNoteList">
                <econdition field-name="partyId"/>
                <order-by field-name="-noteDate"/>
            </entity-find>
            <set field="partyNoteList" from="[]"/>
            <if condition="tmpPartyNoteList">
                <iterate list="tmpPartyNoteList" entry="note">
                    <set field="note_item" from="new HashMap()"/>
                    <script>
                        note_item.putAll(note)
                        partyNoteList.add(note_item)
                    </script>
                    <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail">
                        <field-map field-name="partyId" from="note.userId"/>
                    </entity-find-one>
                    <if condition="partyDetail">
                        <set field="assignedUserFirstName" from="partyDetail.firstName"/>
                        <set field="assignedUserLastName" from="partyDetail.lastName"/>
                        <script>
                            note_item.put("added_by",assignedUserFirstName + ' ' + assignedUserLastName)
                        </script>
                    </if>
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="find" noun="OpportunityNoteList">
        <in-parameters>
            <parameter name="salesOpportunityId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="opportunityNoteList"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.sales.opportunity.SalesOpportunityNote" list="tmpOpportunityNoteList">
                <econdition field-name="salesOpportunityId"/>
                <order-by field-name="-noteDate"/>
            </entity-find>
            <set field="opportunityNoteList" from="[]"/>
            <if condition="tmpOpportunityNoteList">
                <iterate list="tmpOpportunityNoteList" entry="note">
                    <set field="note_item" from="new HashMap()"/>
                    <script>
                        note_item.putAll(note)
                        opportunityNoteList.add(note_item)
                    </script>
<!--                    <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail">-->
<!--                        <field-map field-name="partyId" from="note.userId"/>-->
<!--                    </entity-find-one>-->
<!--                    <if condition="partyDetail">-->
<!--                        <set field="assignedUserFirstName" from="partyDetail.firstName"/>-->
<!--                        <set field="assignedUserLastName" from="partyDetail.lastName"/>-->
<!--                        <script>-->
<!--                            note_item.put("added_by",assignedUserFirstName + ' ' + assignedUserLastName)-->
<!--                        </script>-->
<!--                    </if>-->
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="find" noun="PhoneOptions">
        <out-parameters>
            <parameter name="phoneOptions"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.contact.ContactMechPurpose" list="phoneOptions">
                <econdition field-name="contactMechTypeEnumId" value="CmtTelecomNumber"/>
                <order-by field-name="description"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="WebOptions">
        <out-parameters>
            <parameter name="webOptions"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.contact.ContactMechPurpose" list="webOptions">
                <econdition field-name="contactMechTypeEnumId" value="CmtWebAddress"/>
                <order-by field-name="description"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="EmailOptions">
        <out-parameters>
            <parameter name="emailOptions"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.contact.ContactMechPurpose" list="emailOptions">
                <econdition field-name="contactMechTypeEnumId" value="CmtEmailAddress"/>
                <order-by field-name="description"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="AllTask">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="allTasks"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="WorkEffortAndParty" list="allTasks">
                <econdition field-name="partyId"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="Statuses">
        <out-parameters>
            <parameter name="statusList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="moqui.basic.StatusItem" list="statusList">
                <econdition field-name="statusTypeId" value="WorkEffort"/>
                <select-field field-name="statusId,description"/>
                <order-by field-name="sequenceNum"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="SalesOpportunity">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="oppyList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.sales.opportunity.SalesOpportunity" list="oppyList">
                <econdition field-name="accountPartyId" from="partyId"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="SalesOrders">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.order.OrderHeaderAndPart" list="orderList">
                <econdition field-name="customerPartyId" from="partyId"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="OrderStatuses">
        <out-parameters>
            <parameter name="statusList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="moqui.basic.StatusItem" list="statusList">
                <econdition field-name="statusTypeId" value="OrderHeader"/>
                <select-field field-name="statusId,description"/>
                <order-by field-name="sequenceNum"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="AllRelatedAccounts">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="accountList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyRelationship" list="accountListTmp">
                <date-filter/>
                <econdition field-name="fromPartyId" from="partyId"/>
                <econdition field-name="fromRoleTypeId" value="Contact"/>
                <select-field field-name="toPartyId,partyRelationshipId"/>
            </entity-find>
            <set field="accountList" from="[]"/>
            <if condition="accountListTmp">
                <iterate list="accountListTmp" entry="acct">
                    <set field="item" from="new HashMap()"/>
                    <script>
                        item.putAll(acct)
                        accountList.add(item)
                    </script>
                    <entity-find-one entity-name="mantle.party.PartyDetail" value-field="account_details">
                        <field-map field-name="partyId" from="acct.toPartyId"/>
                    </entity-find-one>
                    <script>
                        item.put("account_name",account_details.organizationName)
                    </script>
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="search" noun="PartyList">
        <in-parameters>
            <parameter name="term"/>
            <parameter name="roleTypeId"/>
            <parameter name="indexName"/>
            <parameter name="documentType"/>
            <parameter name="partyTypeEnumId"/>
            <parameter name="includeDisabled"/> <!-- 'true' includes disabled -->
            <parameter name="restrictActiveOrg"/> <!-- !'true' restricts to active org (only if present) -->
            <parameter name="pageIndex"/>
        </in-parameters>
        <actions>
            <if condition="!term &amp;&amp; !pageIndex"><script>ec.web.sendJsonResponse([])</script><return/></if>
            <set field="term" from="term ?: '*'"/>

            <set field="indexName" from="indexName ?: searchIndexName ?: 'mantle'"/>
            <set field="documentType" from="documentType ?: searchPartyDocType ?: 'MantleParty'"/>
            <!-- <log message="====== searchPartyList indexName=${indexName}, documentType=${documentType}, term=${term}"/> -->

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail">
                <field-map field-name="partyId" from="term"/></entity-find-one>

            <if condition="partyDetail != null"><then>
                <script>
                    def outList = [[value:partyDetail.partyId, label:ec.resource.expand("PartyNameTemplate", "", partyDetail)]]
                    ec.web.sendJsonResponse(outList)
                </script>
            </then><else>
                <!-- if we have activeOrgId or filterOrgIds see if user has active org or user org filters -->
                <set field="activeOrgId" from="ec.user.context?.activeOrgId"/>
                <set field="filterOrgIds" from="ec.user.context?.filterOrgIds"/>
                <set field="findFilters" from="ec.artifactExecution.getFindFiltersForUser('mantle.party.Party')"/>
                <if condition="findFilters"><set field="entityFilterSetId" from="findFilters[0].entityFilterSetId"/></if>
                <!-- <log level="warn" message="Doing party search with activeOrgId ${activeOrgId} filterOrgIds ${filterOrgIds} entityFilterSetId ${entityFilterSetId}"/> -->

                <script><![CDATA[
                    StringBuilder termSb = new StringBuilder('(')
                    termSb.append(elasticQueryAutoWildcard(term, false)).append(')')

                    if (roleTypeId) termSb.append(' AND roles.roleTypeId:(').append(roleTypeId.replaceAll(/,/, ' OR ')).append(')')
                    if (partyTypeEnumId) termSb.append(' AND (partyTypeEnumId:' + partyTypeEnumId + ')')
                    if (!'true'.equals(includeDisabled)) termSb.append(' AND (NOT disabled:Y)')
                    if (activeOrgId && 'true'.equals(restrictActiveOrg)) termSb.append(' AND (partyId:' + activeOrgId + ')')

                    if ('MANTLE_USER_ORG'.equals(entityFilterSetId)) {
                        termSb.append(' AND ownerPartyId:(' + (filterOrgIds ? filterOrgIds.join(' OR ') + ' OR ' : '') + '_NA_)')
                    } else if ('MANTLE_ACTIVE_ORG'.equals(entityFilterSetId) && activeOrgId) {
                        termSb.append(' AND ownerPartyId:(' + activeOrgId + ' OR _NA_)')
                    }
                ]]></script>
                <!-- <log level="warn" message="Doing party search with queryString [${termSb.toString()}], indexName:${indexName}, documentType:${documentType}"/> -->
                <service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="context"
                        in-map="[queryString:termSb.toString(), indexName:indexName, documentType:documentType]"/>
                <!-- <log level="warn" message="Got party search results: ${documentList}"/> -->
                <script>
                    def outList = []
                    for (document in documentList) outList.add([value:document._id, label:ec.resource.expand("PartyNameTemplate", "", document)])
                    ec.web.sendJsonResponse(outList)
                </script>
                <!-- <log level="warn" message="Got party search outList: ${outList}"/> -->
            </else></if>
        </actions>
    </service>
    <service verb="find" noun="ContactList">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactList" type="List"/>
            <parameter name="relationshipCount" type="Integer"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyRelationship" list="tmpContactList">
                <econdition field-name="toPartyId" from="partyId"/>
                <econdition field-name="fromRoleTypeId" value="Contact"/>
                <date-filter/>
            </entity-find>
            <entity-find-count entity-name="mantle.party.PartyRelationship" count-field="relationshipCount">
                <econdition field-name="toPartyId" from="partyId"/><date-filter/>
                <econdition field-name="fromRoleTypeId" value="Contact"/>
            </entity-find-count>
            <set field="contactList" from="[]"/>
            <if condition="tmpContactList">
                <iterate list="tmpContactList" entry="ct">
                    <set field="cnt" from="new HashMap()"/>
                    <script>
                        cnt.putAll(ct)
                        contactList.add(cnt)
                    </script>
                    <entity-find-one entity-name="mantle.party.PartyDetail" value-field="contact_obj">
                        <field-map field-name="partyId" from="ct.fromPartyId"/>
                    </entity-find-one>
                    <if condition="contact_obj">
                        <set field="first_name" from="contact_obj.firstName"/>
                        <set field="last_name" from="contact_obj.lastName"/>
                        <script>
                            cnt.put("contact_person",first_name + ' ' + last_name)
                        </script>
                    </if>
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="find" noun="UOM">
        <out-parameters>
            <parameter name="statusList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="moqui.basic.Uom" list="statusList">
                <econdition field-name="uomTypeEnumId" value="UT_CURRENCY_MEASURE"/>
                <order-by field-name="description"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="OpportunityTasks">
        <in-parameters>
            <parameter name="salesOpportunityId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="weList"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="SalesOpportunityWorkEffort" list="tmpWeList">
                <econdition field-name="salesOpportunityId"/>
            </entity-find>
            <set field="weList" from="[]"/>
            <if condition="tmpWeList">
                <iterate list="tmpWeList" entry="we">
                    <set field="item" from="new HashMap()"/>
                    <script>
                        item.putAll(we)
                        weList.add(item)
                    </script>
                    <entity-find-one entity-name="WorkEffort" value-field="we_obj">
                        <field-map field-name="workEffortId" from="we.workEffortId"/>
                    </entity-find-one>
                    <if condition="we_obj">
                        <set field="workEffortName" from="we_obj.workEffortName"/>
                        <set field="statusId" from="we_obj.statusId"/>
                        <set field="description" from="we_obj.description"/>
                        <set field="estimatedCompletionDate" from="we_obj.estimatedCompletionDate"/>
                        <script>
                            item.put("workEffortName",workEffortName)
                            item.put("statusId",statusId)
                            item.put("description",description)
                            item.put("estimatedCompletionDate",estimatedCompletionDate)
                        </script>
                    </if>
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="find" noun="SingleSalesOpportunity">
        <in-parameters>
            <parameter name="salesOpportunityId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="opportunity" />
            <parameter name="stage" />
            <parameter name="formatted_estimated_amount" />
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.sales.opportunity.SalesOpportunity" value-field="opportunity">
                <select-field field-name="lastUpdatedStamp,opportunityName,description,opportunityStageId,estimatedCloseDate,accountPartyId,currencyUomId,estimatedAmount,salesOpportunityId" />
                <field-map field-name="salesOpportunityId" from="salesOpportunityId"/>
            </entity-find-one>
            <set field="formatted_estimated_amount" from="ec.l10n.formatCurrency(opportunity.estimatedAmount ?: 0, opportunity?.currencyUomId)"/>
            <entity-find-one entity-name="mantle.sales.opportunity.SalesOpportunityStage" value-field="stage">
                <field-map field-name="opportunityStageId" from="opportunity.opportunityStageId"/>
            </entity-find-one>
        </actions>
    </service>
    <service verb="find" noun="OpportunityContacts">
        <in-parameters>
            <parameter name="salesOpportunityId" required="true"/>
            <parameter name="roleTypeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactList" />
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.sales.opportunity.SalesOpportunityParty" list="tmpContactList">
                <econdition field-name="salesOpportunityId" from="salesOpportunityId"/>
                <econdition field-name="roleTypeId" from="roleTypeId"/>
            </entity-find>
            <set field="contactList" from="[]"/>
            <if condition="tmpContactList">
                <iterate list="tmpContactList" entry="ct">
                    <set field="cnt" from="new HashMap()"/>
                    <script>
                        cnt.putAll(ct)
                        contactList.add(cnt)
                    </script>
                    <entity-find-one entity-name="mantle.party.PartyDetail" value-field="contact_obj">
                        <field-map field-name="partyId" from="ct.partyId"/>
                    </entity-find-one>
                    <if condition="contact_obj">
                        <set field="first_name" from="contact_obj.firstName"/>
                        <set field="last_name" from="contact_obj.lastName"/>
                        <script>
                            cnt.put("contact_person",first_name + ' ' + last_name)
                        </script>
                    </if>
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="find" noun="OppContactOptions">
        <in-parameters>
            <parameter name="accountPartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactList" />
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyFromAndRelationship" list="contactList">
                <econdition field-name="toPartyId" from="accountPartyId"/>
                <econdition field-name="fromRoleTypeId" value="Contact"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="StageOptions">
        <out-parameters>
            <parameter name="stageList" />
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.sales.opportunity.SalesOpportunityStage" list="stageList">
                <order-by field-name="sequenceNum"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="SalesTeam">
        <out-parameters>
            <parameter name="stageList" />
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.sales.opportunity.SalesOpportunityParty" list="salesTeamList">
                <econdition field-name="salesOpportunityId" from="salesOpportunityId"/>
                <econdition field-name="roleTypeId" value="SalesRepresentative"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="SalesPersonOptions">
        <out-parameters>
            <parameter name="personOptions" />
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyDetailAndRole" list="personOptions">
                <econdition field-name="roleTypeId" value="SalesRepresentative"/>
            </entity-find>
        </actions>
    </service>
</services>
