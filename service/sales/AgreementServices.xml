<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <!-- Use this to create a new Agreement for subscription products
     This service will create the following records: Agreement, AgreementItem, ProductPrice -->
    <service verb="create" noun="Agreement">
        <in-parameters>
            <parameter name="agreementDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="fromDate"/>
            <parameter name="thruDate"/>
            <parameter name="description"/>
            <parameter name="currencyUomId"/>
            <parameter name="organizationPartyId"/>
            <parameter name="otherPartyId"/> <!-- This is the customer -->
            <parameter name="agreementTypeEnumId" default-value="AgrSales"/>
        </in-parameters>
        <out-parameters><parameter name="agreementId"/></out-parameters>
        <actions>
            <service-call name="create#mantle.party.agreement.Agreement" out-map="context" in-map="context" />
        </actions>
    </service>
    <service verb="find" noun="Agreement">
        <in-parameters>
            <parameter name="agreementId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="agreement"/>
            <parameter name="agreementContact"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.agreement.Agreement" value-field="agreement"/>
            <entity-find-one entity-name="mantle.party.agreement.AgreementContactMech" value-field="agreementContact"/>
        </actions>
    </service>
    <service verb="find" noun="Agreements">
        <in-parameters>
            <parameter name="partyId"/>
            <parameter name="pageOffset" default-value="" type="Integer"/>
            <parameter name="pageLimit" default-value="" type="Integer"/>
            <parameter name="orderByField" default-value="-agreementId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="agreements"/>
            <parameter name="count" type="Integer"/>
        </out-parameters>
        <actions>
            <entity-find-count entity-name="mantle.party.agreement.Agreement" count-field="count" distinct="true">
                <econdition field-name="otherPartyId" from="partyId" ignore-if-empty="true"/>
            </entity-find-count>
            <entity-find offset="pageOffset" limit="pageLimit" entity-name="mantle.party.agreement.Agreement" list="agreements">
                <econdition field-name="otherPartyId" from="partyId" ignore-if-empty="true"/>
                <order-by field-name="${orderByField}"/>
            </entity-find>
        </actions>
    </service>
    <service verb="update" noun="Agreement">
        <in-parameters>
            <parameter name="agreementId" required="true"/>
            <parameter name="organizationPartyId"/>
            <parameter name="fromDate"/>
            <parameter name="thruDate"/>
            <parameter name="description"/>
            <parameter name="currencyUomId"/>
        </in-parameters>
        <actions>
            <!-- TODO: Add status check so this cannot be called if Agreement is beyond draft (approved, canceled) -->
            <service-call name="update#mantle.party.agreement.Agreement" out-map="context" in-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="BillToParty">
        <in-parameters>
            <parameter name="agreementId" required="true"/>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <actions>
            <set field="roleTypeId" value="CustomerBillTo"/>
            <!-- If selected party is the same as the party on the agreement, clear any bill to party records and return. -->
            <entity-find-one entity-name="mantle.party.agreement.Agreement" value-field="agreement"/>
            <if condition="partyId == agreement.otherPartyId">
                <entity-find entity-name="mantle.party.agreement.AgreementParty" list="agreementPartyList">
                    <econdition field-name="agreementId"/>
                    <econdition field-name="roleTypeId"/>
                </entity-find>
                <iterate list="agreementPartyList" entry="agreementParty">
                    <service-call name="delete#mantle.party.agreement.AgreementParty" out-map="context" in-map="[agreementId:agreementId,roleTypeId:roleTypeId,partyId:agreementParty.partyId]"/>
                </iterate>
                <return/>
            </if>
            <!-- Check for existing bill to record -->
            <entity-find-one entity-name="mantle.party.agreement.AgreementParty" value-field="billToParty">
                <field-map field-name="agreementId"/>
                <field-map field-name="roleTypeId"/>
            </entity-find-one>
            <!-- If the bill to has changed delete the old one and create a new one -->
            <if condition="billToParty">
                <if condition="billToParty.partyId != partyId">
                    <service-call name="delete#mantle.party.agreement.AgreementParty" out-map="context" in-map="[agreementId:agreementId,partyId:billToParty.partyId,roleTypeId:roleTypeId]"/>
                    <service-call name="create#mantle.party.agreement.AgreementParty" out-map="context" in-map="context"/>
                </if>
                <!-- If there is no bill to party record create one -->
                <else>
                    <service-call name="create#mantle.party.agreement.AgreementParty" out-map="context" in-map="context"/>
                </else>
            </if>
        </actions>
    </service>
    <service verb="update" noun="BillToContactMech">
        <in-parameters>
            <parameter name="agreementId" required="true"/>
            <parameter name="billToPostalContactMechId"/>
            <parameter name="action" default-value="add"/>
        </in-parameters>
        <actions>
            <!-- Clear existing setting from AgreementContactMech -->
            <service-call name="delete#mantle.party.agreement.AgreementContactMech">
                <field-map field-name="agreementId" from="agreementId"/>
                <field-map field-name="contactMechPurposeId" value="PostalBilling"/>
                <field-map field-name="contactMechId" value="*"/>
            </service-call>
            <if condition="action != 'delete'">
                <service-call name="create#mantle.party.agreement.AgreementContactMech">
                    <field-map field-name="agreementId" from="agreementId"/>
                    <field-map field-name="contactMechPurposeId" value="PostalBilling"/>
                    <field-map field-name="contactMechId" from="billToPostalContactMechId"/>
                </service-call>
            </if>
        </actions>
    </service>
    <service verb="find" noun="AgreementItems">
        <in-parameters>
            <parameter name="agreementId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="agreementItemList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.agreement.AgreementItemAndProductPrice" list="agreementItemListMain">
                <econdition field-name="agreementId"/>
                <econdition field-name="agreementItemTypeEnumId" value="AitPricing"/> <!-- Exclude subscriptions -->
            </entity-find>
            <set field="agreementItemList" from="[]"/>
            <if condition="agreementItemListMain">
                <iterate list="agreementItemListMain" entry="ai">
                    <set field="agItem" from="new HashMap()"/>
                    <script>
                        agItem.putAll(ai)
                        agreementItemList.add(agItem)
                    </script>
                    <set field="formattedLineAmount" from="ec.l10n.formatCurrency(ai.lineAmount ?: 0, ai?.priceUomId)"/>
                    <script>
                        agItem.put("formattedLineAmount",formattedLineAmount)
                    </script>
                    <entity-find-one entity-name="mantle.product.Product" value-field="product">
                        <field-map field-name="productId" from="ai.productId"/>
                    </entity-find-one>
                    <if condition="product">
                        <script>
                            agItem.put("product",product.productName)
                        </script>
                    </if>
                    <entity-find-one entity-name="moqui.basic.Enumeration" value-field="itemType">
                        <field-map field-name="enumId" from="ai.agreementItemTypeEnumId"/>
                    </entity-find-one>
                    <if condition="itemType">
                        <script>
                            agItem.put("itemType",itemType.description)
                        </script>
                    </if>
                    <entity-find entity-name="mantle.product.ProductPrice" list="productPrice">
                        <econdition field-name="productId" from="ai.productId"/>
                        <econdition field-name="priceTypeEnumId" value="PptList"/>
                        <date-filter/>
                    </entity-find>
                    <if condition="productPrice">
                        <set field="listPrice" from="ec.l10n.formatCurrency(productPrice[0]['price'] ?: 0, productPrice[0]['priceUomId'])"/>
                        <script>
                            agItem.put("listPrice",listPrice)
                        </script>
                    </if>
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="find" noun="AgreementParties">
        <in-parameters>
            <parameter name="agreementId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="agreementPartyList" type="List"/>
            <parameter name="billToParty"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.agreement.AgreementPartyDetail" list="agreementPartyList"/>
            <entity-find-one entity-name="mantle.party.agreement.AgreementPartyDetail" value-field="billToParty">
                <field-map field-name="agreementId"/>
                <field-map field-name="roleTypeId" value="CustomerBillTo"/>
            </entity-find-one>
            <if condition="!billToParty">
                <entity-find-one entity-name="mantle.party.agreement.Agreement" value-field="agreement"/>
                <entity-find-one entity-name="mantle.party.PartyDetail" value-field="billToParty">
                    <field-map field-name="partyId" from="agreement.otherPartyId"/>
                </entity-find-one>
            </if>
        </actions>
    </service>
    <service verb="create" noun="AgreementItem"><description>Current version supports adding products to an Agreement for a given date range and linking to a ProductPrice record.</description>
        <in-parameters>
            <parameter name="agreementId" required="true"/>
            <parameter name="agreementItemType" default="AitPricing"/>
            <parameter name="productId"/>
            <parameter name="fromDate"/>
            <parameter name="thruDate"/>
            <parameter name="quantity"/>
            <parameter name="unitAmount"/>
            <parameter name="priceUomId"/>
        </in-parameters>
        <actions>
            <set field="price" from="unitAmount"/>
            <!-- Create AgreementItem and ProductPrice and link with agreementId and agreementItemSeqId on ProductPrice -->
            <service-call name="create#mantle.party.agreement.AgreementItem" out-map="context" in-map="context"/>
            <service-call name="create#mantle.product.ProductPrice" out-map="context" in-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="AgreementItem"><description>Current version supports adding products to an Agreement for a given date range and linking to a ProductPrice record.</description>
        <in-parameters>
            <parameter name="agreementId" required="true"/>
            <parameter name="agreementItemSeqId" required="true"/>
            <parameter name="productPriceId" required="true"/>
            <parameter name="productId"/>
            <parameter name="price"/>
            <parameter name="itemText"/>
            <parameter name="fromDate"/>
            <parameter name="thruDate"/>
            <parameter name="quantity"/>
            <parameter name="unitAmount"/>
            <parameter name="priceUomId"/>
        </in-parameters>
        <actions>
            <service-call name="update#mantle.party.agreement.AgreementItem" out-map="context" in-map="context"/>
            <service-call name="update#mantle.product.ProductPrice" out-map="context" in-map="context"/>
        </actions>
    </service>
    <service verb="find" noun="AgreementSubscriptions">
        <in-parameters>
            <parameter name="agreementId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="agreementSubscriptionList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.agreement.AgreementItemAndSubscription" list="agreementSubscriptionList">
                <econdition field-name="agreementId"/>
            </entity-find>
        </actions>
    </service>
    <service verb="get" noun="OrganizationOptions">
        <out-parameters>
            <parameter name="orgOptions" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyDetailAndRole" list="orgOptions">
            <econdition field-name="partyId" from="activeOrgId" ignore="!activeOrgId"/>
            <econdition field-name="roleTypeId" value="OrgInternal"/>
            <econdition field-name="disabled" value="N" or-null="true"/>
            <order-by field-name="organizationName"/></entity-find>
        </actions>
    </service>
    <service verb="get" noun="RoleOptions">
        <out-parameters>
            <parameter name="roleList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.RoleGroupMemberAndType" list="roleList" cache="true">
            <econdition field-name="roleGroupEnumId" value="RgpAgreement"/>
            <order-by field-name="description"/></entity-find>
        </actions>
    </service>
    <service verb="get" noun="ProductList">
        <in-parameters>
            <parameter name="term"/>
            <parameter name="productFeatureIds"/>
            <parameter name="productTypeEnumId"/>
            <parameter name="productClassEnumId"/>
            <parameter name="assetTypeEnumId"/>
            <parameter name="assetClassEnumId"/>
            <parameter name="indexName"/>
            <parameter name="documentType"/>
            <parameter name="pageIndex"/>
        </in-parameters>
        <actions>
            <set field="indexName" from="indexName ?: searchIndexName ?: 'mantle'"/>
            <set field="documentType" from="documentType ?: searchProductDocType ?: 'MantleProduct'"/>
            <!-- <log message="====== getProductList indexName=${indexName}, documentType=${documentType}, term=${term}"/> -->

            <set field="outList" from="[]"/>

            <entity-find-one entity-name="mantle.product.Product" value-field="product">
                <field-map field-name="productId" from="term"/></entity-find-one>
            <if condition="product != null"><then>
                <script>outList.add([value:product.productId, label:ec.resource.expand("ProductNameTemplate", "", product)])</script>
            </then><else>
                <entity-find-one entity-name="mantle.product.Product" value-field="pseudoProduct">
                    <field-map field-name="pseudoId" from="term"/></entity-find-one>
                <if condition="pseudoProduct != null">
                    <script>outList.add([value:pseudoProduct.productId, label:ec.resource.expand("ProductNameTemplate", "", pseudoProduct)])</script></if>
            </else></if>

            <!-- if we have activeOrgId or filterOrgIds see if user has active org or user org filters -->
            <set field="activeOrgId" from="ec.user.context?.activeOrgId"/>
            <set field="filterOrgIds" from="ec.user.context?.filterOrgIds"/>
            <set field="findFilters" from="ec.artifactExecution.getFindFiltersForUser('mantle.product.Product')"/>
            <if condition="findFilters"><set field="entityFilterSetId" from="findFilters[0].entityFilterSetId"/></if>
            <!-- <log level="warn" message="Doing product search with activeOrgId ${activeOrgId} filterOrgIds ${filterOrgIds} entityFilterSetId ${entityFilterSetId}"/> -->

            <script><![CDATA[
                StringBuilder termSb = new StringBuilder('(')
                termSb.append(elasticQueryAutoWildcard(term, false)).append(')')
                if (productFeatureIds) {
                    List productFeatureIdList = productFeatureIds.split(',')
                    // NOTE: using features.productFeatureId instead of plain productFeatureId as newer ElasticSearch doesn't search in nested fields
                    termSb.append(' AND features.productFeatureId:')
                    if (productFeatureIdList.size() > 1) termSb.append('(')
                    for (int i = 0; i < productFeatureIdList.size(); i++) {
                        termSb.append(productFeatureIdList.get(i))
                        if (i < (productFeatureIdList.size() - 1)) termSb.append(' OR ')
                    }
                    if (productFeatureIdList.size() > 1) termSb.append(')')
                }
                if (productTypeEnumId) termSb.append(' AND productTypeEnumId:').append(productTypeEnumId)
                if (productClassEnumId) termSb.append(' AND productClassEnumId:').append(productClassEnumId)
                if (assetTypeEnumId) termSb.append(' AND assetTypeEnumId:').append(assetTypeEnumId)
                if (assetClassEnumId) termSb.append(' AND assetClassEnumId:').append(assetClassEnumId)

                if ('MANTLE_USER_ORG'.equals(entityFilterSetId)) {
                    termSb.append(' AND ownerPartyId:(' + filterOrgIds.join(' OR ') + ')')
                } else if ('MANTLE_ACTIVE_ORG'.equals(entityFilterSetId) && activeOrgId) {
                    termSb.append(' AND ownerPartyId:(' + activeOrgId + ' OR _NA_)')
                }
            ]]></script>
            <!-- <log level="warn" message="Doing product search with queryString [${termSb.toString()}], indexName:${indexName}, documentType:${documentType}"/> -->
            <!--
                NOTE: can't order by pseudoId now that it is a 'text' type in ES instead of 'keyword', commenting as a temporary workaround, error message suggests fix:
                "Fielddata is disabled on text fields by default. Set fielddata=true on [pseudoId] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead."

                A better approach would be to use a text field + a keyword field as suggested here: https://www.elastic.co/guide/en/elasticsearch/reference/current/fielddata.html
                Which should be primary and secondary, ie pseudoId + pseudoId.keyword (field specific search easier)
                    OR pseudoId + pseudoId.text (order by easier, search by field tougher but search on all fields doesn't matter)?

                Without this seems to come back in reasonable order anyway, maybe not bother with explicit order by?

                <set field="orderByFields" from="term ? null : ['pseudoId']"/>
            -->
            <service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="context" ignore-error="true"
                    in-map="[queryString:termSb.toString(), indexName:indexName, documentType:documentType,
                        orderByFields:orderByFields, pageIndex:pageIndex, pageSize:(pageSize?:20)]"/>
            <!-- <log level="warn" message="Got product search results: ${documentList}"/> -->
            <script>
                for (document in documentList) outList.add([value:document._id, label:ec.resource.expand("ProductNameTemplate", "", [productName:document.name,productId:document._id,pseudoId:document.pseudoId])])
                if (pageIndex) ec.web.sendJsonResponse([options:outList, pageSize:documentListPageSize, count:documentListCount])
                else ec.web.sendJsonResponse(outList)
            </script>
            <!-- <log level="warn" message="Got product search outList: ${outList}"/> -->
        </actions>
    </service>
    <service verb="find" noun="AgreementTerms">
        <in-parameters>
            <parameter name="agreementId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="agreementTermList" type="list"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.agreement.AgreementTerm" list="agreementTermList">
                <econdition field-name="agreementId"/>
                <order-by field-name="termTypeEnumId,settlementTermId"/>
            </entity-find>
        </actions>
    </service>
</services>
