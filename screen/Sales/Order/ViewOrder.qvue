<template>
    <div class="row">
        <div class="col-md-6 col-lg-6 col-xs-12 col-sm-12">
            <q-card flat bordered :class="!$q.dark.isActive?'custom_style custom_radius':'custom_radius'" class="q-pa-sm">
                <q-card-section style="display: flow-root;padding-top:0px">
                    <div class="text-h6 float-left q-pt-xs">Order #{{order_part.orderId}} -
                    <span v-if="order_part_info && order_part_info.customerDetail && order_part_info.customerDetail.organizationName">
                        {{order_part_info.customerDetail.organizationName}}
                    </span>
                    <span v-if="order_part_info && order_part_info.customerDetail && order_part_info.customerDetail.firstName">
                        {{order_part_info.customerDetail.firstName}} {{order_part_info.customerDetail.lastName}}
                    </span>
                    </div>
                    <q-btn icon="open_in_new" rounded @click="modal_place_warning=true" class="text-green float-right q-px-sm q-mt-none text-capitalize" outline dense label="Place Warnings"></q-btn>
                </q-card-section>
                <q-card-section class="correct_input_fields">
                    <div class="row q-mt-sm">
                        <div class="col-md-3 col-lg-3 col-xs-12 col-sm-12">
                            <q-input readonly rounded v-model="status_item.description" outlined label="Status" style="margin:0;padding:0;" dense>
                            </q-input>
                        </div>
                        <div class="col-md-3 col-lg-3 col-xs-12 col-sm-12 q-pl-sm">
                            <q-input readonly rounded v-model="order_header.created" outlined label="Created" style="margin:0;padding:0;" dense>
                            </q-input>
                        </div>
                        <div class="col-md-3 col-lg-3 col-xs-12 col-sm-12 q-pl-sm">
                            <q-input readonly rounded v-model="order_grand_total" outlined label="Grand Total" style="margin:0;padding:0;" dense>
                            </q-input>
                        </div>
                    </div>
                    <div class="q-mt-md">
                        Customer Email: <span v-if="!order_part_info.customerEmail">No Order or Primary email found</span>
                        <span v-if="order_part_info.customerEmail">{{order_part_info.customerEmail}}</span>
                    </div>
                </q-card-section>
            </q-card>

            <q-card flat bordered :class="!$q.dark.isActive?'custom_style custom_radius':'custom_radius'" class="q-pa-sm q-mt-sm">
                <q-card-section>
                    <div class="row">
                        <div class="col-9 text-h6">
                            Ship To Customer:
                            <span v-if="customer_ship_to_detail && customer_ship_to_detail.organizationName">{{customer_ship_to_detail.organizationName}}</span>
                            <span v-if="customer_ship_to_detail && customer_ship_to_detail.firstName">{{customer_ship_to_detail.firstName}} {{customer_ship_to_detail.lastName}}</span>
                        </div>
                        <div class="col-3">
                            <q-btn icon="open_in_new" rounded @click="change_ship_party=true" class="text-blue q-px-sm q-mt-xs text-capitalize float-right" outline dense label="Change Ship To"></q-btn>
                        </div>
                    </div>
                </q-card-section>


                <q-card-section>
                    <q-card flat bordered style="min-height: 62px;" class="custom_radius q-pa-sm">

                        <div class="text-h6" style="display: flow-root;">Ship To Address
                            <q-btn icon="open_in_new" rounded @click="add_which='ship',add_dialog=true" class="text-blue q-px-sm q-mt-xs text-capitalize float-right" outline dense label="Add"></q-btn>
                            <q-btn icon="open_in_new" rounded @click="select_ship_to_address=true" class="text-blue q-px-sm q-mt-xs text-capitalize float-right" outline dense label="Select"></q-btn>
                        </div>
                        <div class="q-pl-sm" v-if="selected_ship_to_address && selected_ship_to_address.postalAddress">
                            <div class="q-py-xs q-mt-sm" v-if="selected_ship_to_address.postalAddress.toName">
                                <b>To: {{selected_ship_to_address.postalAddress.toName}}</b>
                            </div>
                            <div class="q-py-xs" v-if="selected_ship_to_address.postalAddress.attnName">
                                <b>Attention: {{selected_ship_to_address.postalAddress.attnName}}</b>
                            </div>
                            <div class="q-py-xs">
                                <span v-if="selected_ship_to_address.postalAddress.address1">{{selected_ship_to_address.postalAddress.address1}}</span>
                                <span v-if="selected_ship_to_address.postalAddress.unitNumber">
                                    #{{selected_ship_to_address.postalAddress.unitNumber}}
                                </span>
                            </div>
                            <div class="q-py-xs" v-if="selected_ship_to_address.postalAddress.address2">
                                {{selected_ship_to_address.postalAddress.address2}}
                            </div>
                            <div class="q-py-xs" v-if="selected_ship_to_address.add_last_line && selected_ship_to_address.add_last_line.trim() != ','">
                                {{selected_ship_to_address.add_last_line}}
                            </div>
                            <div class="q-py-xs" v-if="selected_ship_to_address.telecomNumber">
                                T: <span v-if="selected_ship_to_address.telecomNumber.countryCode">{{selected_ship_to_address.telecomNumber.countryCode}}-</span>
                                <span v-if="selected_ship_to_address.telecomNumber.areaCode">{{selected_ship_to_address.telecomNumber.areaCode}}-</span>
                                <span v-if="selected_ship_to_address.telecomNumber.contactNumber">{{selected_ship_to_address.telecomNumber.contactNumber}}</span>
                                <span v-if="selected_ship_to_address.telecomNumber.extension">x{{selected_ship_to_address.telecomNumber.extension}}</span>
                            </div>
                            <div class="q-py-xs" v-if="selected_ship_to_address.emailAddress">
                                <a :href="'mailto:' + selected_ship_to_address.emailAddress">{{selected_ship_to_address.emailAddress}}</a>
                            </div>
                        </div>
                        <div v-if="!selected_ship_to_address">
                            <div class="q-py-xs q-mt-sm text-italic">
                                Please select an address using the 'Select' button. If none are listed add a new address.
                            </div>
                        </div>
                    </q-card>
                </q-card-section>
            </q-card>

            <!--<q-card flat bordered :class="!$q.dark.isActive?'custom_style custom_radius':'custom_radius'" class="q-pa-sm q-mt-sm">
                <q-card-section>
                    <div class="row">
                        <div class="col-12 text-h6">
                            Agreement (Contract) Information
                        </div>
                    </div>
                    <div class="row q-mt-md correct_input_fields">
                        <div class="col-md-6 col-lg-6 col-xs-12 col-sm-12">
                            <q-input style="width:48%;float:left;margin-right:5px;" rounded label="Effective Date" outlined dense v-model="order_detail.effective_date">
                                <template v-slot:prepend>
                                  <q-icon name="event" class="cursor-pointer">
                                    <q-popup-proxy ref="qDateProxy" transition-show="scale" transition-hide="scale">
                                      <q-date mask="YYYY-MM-DD" v-model="order_detail.effective_date">
                                        <div class="row items-center justify-end">
                                          <q-btn rounded v-close-popup label="Close" color="primary" flat />
                                        </div>
                                      </q-date>
                                    </q-popup-proxy>
                                  </q-icon>
                                </template>
                              </q-input>

                            <q-input class="q-ml-sm" style="width:48%;float:left;" rounded label="End Date" style="margin:0;padding:0;" outlined dense v-model="order_detail.end_date">
                                <template v-slot:prepend>
                                  <q-icon name="event" class="cursor-pointer">
                                    <q-popup-proxy ref="qDateProxy" transition-show="scale" transition-hide="scale">
                                      <q-date mask="YYYY-MM-DD" v-model="order_detail.end_date">
                                        <div class="row items-center justify-end">
                                          <q-btn rounded v-close-popup label="Close" color="primary" flat />
                                        </div>
                                      </q-date>
                                    </q-popup-proxy>
                                  </q-icon>
                                </template>
                              </q-input>
                        </div>
                        <div class="col-md-4 col-lg-4 col-xs-12 col-sm-12">
                            <q-input rounded v-model="order_detail.description" outlined label="Part Name" style="margin:0;padding:0;" dense>
                                <template v-slot:after>
                                    <q-btn rounded size="18px" @click="updateAgreement" style="width: 70px" class="text-blue q-px-sm q-mt-xs q-ml-md text-capitalize" outline dense label="Update"></q-btn>
                                </template>
                            </q-input>
                        </div>
                    </div>
                </q-card-section>


                <q-card-section>
                    <q-card flat bordered style="min-height: 62px;" class="custom_radius q-pa-sm">

                        <div class="text-h6" style="display: flow-root;">Order Parties
                            <q-btn icon="open_in_new" rounded @click="select_bill_to_address=true" class="text-blue q-px-sm q-mt-xs text-capitalize float-right" outline dense label="Add Party"></q-btn>
                        </div>
                        <div class="">
                            <div class="q-py-xs q-mt-sm">
                                <span class="text-blue text-weight-bold">X</span><span class="q-pl-sm text-weight-bold">Customer - Bill to:</span> JohnSales: John Sales<br />
                                <span class="text-blue text-weight-bold">X</span><span class="q-pl-sm text-weight-bold">Customer - Ship to:</span> JohnCatalog: John Catalog
                            </div>
                        </div>
                    </q-card>
                </q-card-section>
            </q-card>-->

        </div>

        <div class="col-md-6 col-lg-6 col-xs-12 col-sm-12 q-pl-sm">
            <q-card flat bordered :class="!$q.dark.isActive?'custom_style custom_radius':'custom_radius'" class="q-pa-sm">
                <q-card-section>
                    <div class="row">
                        <div class="col-9 text-h6">
                            Bill To Customer:
                            <span v-if="customer_bill_to_detail && customer_bill_to_detail.organizationName">{{customer_bill_to_detail.organizationName}}</span>
                            <span v-if="customer_bill_to_detail && customer_bill_to_detail.firstName">{{customer_bill_to_detail.firstName}} {{customer_bill_to_detail.lastName}}</span>
                        </div>
                        <div class="col-3">
                            <q-btn icon="open_in_new" rounded @click="change_bill_party=true" class="text-blue q-px-sm q-mt-xs text-capitalize float-right" outline dense label="Change Bill To"></q-btn>
                        </div>
                    </div>
                </q-card-section>


                <q-card-section>
                    <q-card flat bordered style="min-height: 62px;" class="custom_radius q-pa-sm">

                        <div class="text-h6" style="display: flow-root;">Bill To Address
                        <q-btn icon="open_in_new" rounded @click="add_which='bill',add_dialog=true" class="text-blue q-px-sm q-mt-xs text-capitalize float-right" outline dense label="Add"></q-btn>
                        <q-btn icon="open_in_new" rounded @click="select_bill_to_address=true" class="text-blue q-px-sm q-mt-xs text-capitalize float-right" outline dense label="Select"></q-btn>
                        </div>
                        <div class="q-pl-sm" v-if="selected_bill_to_address && selected_bill_to_address.postalAddress">
                            <div class="q-py-xs q-mt-sm" v-if="selected_bill_to_address.postalAddress.toName">
                                <b>To: {{selected_bill_to_address.postalAddress.toName}}</b>
                            </div>
                            <div class="q-py-xs" v-if="selected_bill_to_address.postalAddress.attnName">
                                <b>Attention: {{selected_bill_to_address.postalAddress.attnName}}</b>
                            </div>
                            <div class="q-py-xs">
                                <span v-if="selected_bill_to_address.postalAddress.address1">{{selected_bill_to_address.postalAddress.address1}}</span>
                                <span v-if="selected_bill_to_address.postalAddress.unitNumber">
                                    #{{selected_bill_to_address.postalAddress.unitNumber}}
                                </span>
                            </div>
                            <div class="q-py-xs" v-if="selected_bill_to_address.postalAddress.address2">
                                {{selected_bill_to_address.postalAddress.address2}}
                            </div>
                            <div class="q-py-xs" v-if="selected_bill_to_address.add_last_line && selected_bill_to_address.add_last_line.trim() != ','">
                                {{selected_bill_to_address.add_last_line}}
                            </div>
                            <div class="q-py-xs" v-if="selected_bill_to_address.telecomNumber">
                                T: <span v-if="selected_bill_to_address.telecomNumber.countryCode">{{selected_bill_to_address.telecomNumber.countryCode}}-</span>
                                <span v-if="selected_bill_to_address.telecomNumber.areaCode">{{selected_bill_to_address.telecomNumber.areaCode}}-</span>
                                <span v-if="selected_bill_to_address.telecomNumber.contactNumber">{{selected_bill_to_address.telecomNumber.contactNumber}}</span>
                                <span v-if="selected_bill_to_address.telecomNumber.extension">x{{selected_bill_to_address.telecomNumber.extension}}</span>
                            </div>
                            <div class="q-py-xs" v-if="selected_bill_to_address.emailAddress">
                                <a :href="'mailto:' + selected_bill_to_address.emailAddress">{{selected_bill_to_address.emailAddress}}</a>
                            </div>
                        </div>
                        <div v-if="!selected_bill_to_address">
                            <div class="q-py-xs q-mt-sm text-italic">
                                Please select an address using the 'Select' button. If none are listed add a new address.
                            </div>
                        </div>
                    </q-card>
                </q-card-section>
            </q-card>

            <q-card flat bordered :class="!$q.dark.isActive?'custom_style custom_radius':'custom_radius'" class="q-pa-sm q-mt-sm">
                <q-card-section>
                    <div class="row">
                        <div class="col-9 text-h6">
                            Payment Information
                        </div>
                        <div class="col-3">
                            <q-btn icon="open_in_new" rounded @click="add_payment=true" class="text-blue q-px-sm q-mt-xs text-capitalize" outline dense label="Add Payment"></q-btn>
                        </div>
                    </div>
                </q-card-section>
                <q-card-section>
                    <div class="row" v-for="part_payment_info in part_payment_info_list">
                        <div class="row full-width">
                            <div class="col-9 text-bold">
                                <span>
                                <span v-if="part_payment_info.paymentMethodTypeEnum?.description">{{part_payment_info.paymentMethodTypeEnum?.description}}</span>
                                <span v-else>{{part_payment_info.paymentInstrumentEnum?.description}}</span>
                                ({{part_payment_info.paymentTypeEnum?.description}}) {{part_payment_info.partPayment.amount}}
                                - Status: {{part_payment_info.statusItem?.description}}</span>
                                <span v-if="part_payment_info.partPayment?.dueDate"> - Due: {{formatDate(part_payment_info.partPayment.dueDate)}}</span>
                            </div>
                            <div class="col-3">

                            </div>
                        </div>
                        <div class="row q-my-sm full-width">
                            <strong v-if="part_payment_info.paymentMethod?.description">{{part_payment_info.paymentMethod?.description}}<br></strong>
                            <div class="full-width q-py-xs" v-if="part_payment_info.bankAccount">
                                <span>{{part_payment_info.bankAccount.bankName}} (<span v-if="part_payment_info.bankAccountTypeEnum?.description">{{part_payment_info.bankAccountTypeEnum?.description}}</span><span v-else>part_payment_info.bankAccount.typeEnumId</span>)<br></span>
                                <span>{{part_payment_info.bankAccount.routingNumber}}:{{part_payment_info.bankAccount.accountNumber}}<br></span>
                            </div>
                            <div class="full-width q-py-xs" v-if="part_payment_info.creditCard">
                                <span><span v-if="part_payment_info.creditCardTypeEnum?.description">{{part_payment_info.creditCardTypeEnum?.description}}</span><span v-else>part_payment_info.creditCard.creditCardTypeEnumId</span><span v-if="part_payment_info.maskedCardNumber"> {{part_payment_info.maskedCardNumber}}</span><span v-if="part_payment_info.creditCard.expireDate"> {{part_payment_info.creditCard.expireDate}}</span></span>
                            </div>
                            <strong class="full-width" v-if="part_payment_info.paymentMethod?.firstNameOnAccount">{{part_payment_info.paymentMethod?.firstNameOnAccount}}<span v-if="part_payment_info.paymentMethod?.middleNameOnAccount"> {{part_payment_info.paymentMethod.middleNameOnAccount}}</span><span v-if="part_payment_info.paymentMethod?.lastNameOnAccount"> {{part_payment_info.paymentMethod?.lastNameOnAccount}}</span><br></strong>
                            <strong class="full-width" v-if="part_payment_info.paymentMethod?.companyNameOnAccount">{{part_payment_info.paymentMethod?.companyNameOnAccount}}<br></strong>
                            <div class="full-width" v-if="part_payment_info.address" v-html="part_payment_info.address"></div>
                            <div class="full-width q-py-xs" v-if="part_payment_info.telecomNumber">
                                P: <span v-if="part_payment_info.telecomNumber.countryCode">{{part_payment_info.telecomNumber.countryCode}}-</span>
                                <span v-if="part_payment_info.telecomNumber.areaCode">{{part_payment_info.telecomNumber.areaCode}}-</span>
                                <span v-if="part_payment_info.telecomNumber.contactNumber">{{part_payment_info.telecomNumber.contactNumber}}</span>
                                <span v-if="part_payment_info.telecomNumber.extension">x{{part_payment_info.telecomNumber.extension}}</span>
                            </div>
                            <div class="full-width q-py-xs" v-if="part_payment_info.emailAddress">
                                <a :href="'mailto:' + part_payment_info.emailAddress">{{part_payment_info.emailAddress}}</a>
                            </div>
                            <span v-if="part_payment_info.paymentMethod?.gatewayCimId">CIM ID: {{part_payment_info.paymentMethod.gatewayCimId}}</span>
                            <span v-if="part_payment_info.paymentMethod?.paymentGatewayConfigId">Gateway:
                            <span v-if="part_payment_info.paymentMethod.gatewayConfig?.description">{{part_payment_info.paymentMethod.gatewayConfig?.description}}</span>
                            <span v-else><span v-if="part_payment_info.paymentMethod?.paymentGatewayConfigId === 'FinancialAccountLocal'">Financial Account Local</span></span>
                            </span>
                        </div>
                    </div>
                </q-card-section>
                <q-card-section>
                        <div class="q-mt-sm correct_input_fields">
                            <q-select rounded
                              label="Payment Terms"
                              dense
                              outlined
                              v-model="order_detail_payment_terms"
                              :class="!$q.dark.isActive?'custom_style':''"
                              use-input
                              input-debounce="700"
                              option-value="settlementTermId"
                              option-label="description"
                              :options="payment_terms_options"
                              @filter="filterFnPaymentTerms"
                              @input="updatePaymentTerms"
                            >
                              <template v-slot:no-option>
                                <q-item>
                                  <q-item-section class="text-grey">
                                    No results
                                  </q-item-section>
                                </q-item>
                              </template>
                            </q-select>
                        </div>
                </q-card-section>

            </q-card>
        </div>

        <div class="col-md-12 col-lg-12 col-xs-12 col-sm-12">
            <q-card flat bordered :class="!$q.dark.isActive?'custom_style custom_radius':'custom_radius'" class="q-pa-sm q-mt-sm">
                <q-card-section>
                    <div class="row">
                        <div class="col-9 text-h6">
                            Order Items
                        </div>
                        <div class="col-3">
                            <q-btn icon="open_in_new" rounded @click="add_item=true" class="text-blue q-px-sm q-mt-xs text-capitalize float-right" outline dense label="Add Product"></q-btn>
                        </div>
                    </div>
                </q-card-section>

                <q-card-section class="correct_input_fields">
                        <div class="q-mt-xs">
                                <q-table
                              :data="order_items_list"
                              :columns="order_items_columns"
                              row-key="name"
                              hide-bottom
                              flat
                              dense
                              class="bg-transparent"
                              :pagination.sync="pagination_order_items"
                            >
                                <template v-slot:body-cell-price="props">
                                    <q-td style="width: 170px;">
                                        <q-input v-if="order_part_info.partEditable && props.row.isPromo != 'Y'" label="Price" v-model="props.row.unitAmount" rounded outlined style="width: 138px;margin-top:8px;margin-bottom:8px;padding:0;" dense>
                                        </q-input>
                                        <span v-if="!(order_part_info.partEditable && props.row.isPromo != 'Y')">
                                            {{props.row.unitAmount}}
                                        </span>
                                    </q-td>
                                </template>
                                <template v-slot:body-cell-quantity="props">
                                    <q-td style="width: 170px;">
                                        <q-input v-if="order_part_info.partEditable && props.row.isPromo != 'Y'" label="Quantity" v-model="props.row.quantity" rounded outlined style="width: 138px;margin-top:8px;margin-bottom:8px;padding:0;" dense>
                                        </q-input>
                                        <span v-if="!(order_part_info.partEditable && props.row.isPromo != 'Y')">
                                            {{props.row.quantity}}
                                        </span>
                                    </q-td>
                                </template>
                                <template v-slot:body-cell-type="props">
                                    <q-td style="width: 170px;">
                                        <span>
                                            {{props.row.item_type_name}} <span v-if="props.row.isPromo == 'Y'">(Promotion)</span>
                                        </span>
                                    </q-td>
                                </template>
                                <template v-slot:body-cell-action="props">
                                    <q-td class="text-right" style="width: 170px;">
                                        <q-btn @click="updateItem(props.row)" v-if="order_part_info.partEditable && props.row.isPromo != 'Y'" rounded outline dense icon="edit" class="text-capitalize text-primary">Update</q-btn>
                                        <q-btn rounded outline @click="confirmDelete(props.row)" dense icon="delete" class="text-capitalize text-red"></q-btn>
                                    </q-td>
                                </template>
                            </q-table>
                        </div>
                </q-card-section>

            </q-card>
        </div>
        <q-dialog v-model="delete_order_item" persistent>
          <q-card style="max-width: 450px" class="q-pa-md">
            <q-card-section class="row items-center">
              <q-avatar icon="delete" color="red" text-color="white"></q-avatar>
              <span class="q-ml-sm q-mt-md text-medium" style="font-size: 18px;">Are you sure you want to delete this order item?</span>
            </q-card-section>

            <q-card-actions align="right">
              <q-btn rounded outlined label="Cancel" color="grey" v-close-popup></q-btn>
              <q-btn rounded v-if="" outlined label="Delete" color="red" @click="deleteItem"></q-btn>
            </q-card-actions>
          </q-card>
        </q-dialog>
        <q-dialog v-model="delete_party_from_agreement" persistent>
          <q-card style="max-width: 450px" class="q-pa-md">
            <q-card-section class="row items-center">
              <q-avatar icon="delete" color="red" text-color="white"></q-avatar>
              <span class="q-ml-sm q-mt-md text-medium" style="font-size: 18px;">Are you sure you want to remove this party from the Agreement?</span>
            </q-card-section>

            <q-card-actions align="right">
              <q-btn rounded outlined label="Cancel" color="grey" v-close-popup></q-btn>
              <q-btn rounded v-if="" outlined label="Delete" color="red" @click="removeAgreementParty"></q-btn>
            </q-card-actions>
          </q-card>
        </q-dialog>
        <q-dialog v-model="add_party">
          <q-card class="detail_cls q-px-none q-pt-sm" style="width: 600px">
            <q-card-section>
            <div class="row q-px-sm">
                <div class="col-10">
                    <div class="text-h5">Add Party</div>
                </div>
                <div class="col-2 text-right">
                    <q-icon v-close-popup style="font-size:18px;" name="close" class="text-weight-bold cursor-pointer"></q-icon>
                </div>
            </div>
            </q-card-section>

            <q-separator class="q-mx-none"></q-separator>

            <q-card-section style="font-size: 16px" class="q-pt-none q-mx-sm">
                            <q-select rounded
                                label="Party"
                                dense
                                outlined
                                v-model="new_party"
                                use-input
                                :class="!$q.dark.isActive?'bg-white':''"
                                input-debounce="0"
                                option-value="value"
                                option-label="label"
                                :options="account_options"
                                @filter="filterFnAccount"
                              >
                                <template v-slot:no-option>
                                  <q-item>
                                    <q-item-section class="text-grey">
                                      No results
                                    </q-item-section>
                                  </q-item>
                                </template>
                              </q-select>

                            <div class="q-mt-sm q-pt-sm">
                                <q-select rounded
                                label="Role"
                                dense
                                outlined
                                v-model="new_role"
                                use-input
                                :class="!$q.dark.isActive?'bg-white':''"
                                input-debounce="0"
                                option-value="roleTypeId"
                                option-label="description"
                                :options="role_options"
                                @filter="filterFnRole"
                              >
                                <template v-slot:no-option>
                                  <q-item>
                                    <q-item-section class="text-grey">
                                      No results
                                    </q-item-section>
                                  </q-item>
                                </template>
                              </q-select>
                            </div>
            </q-card-section>

            <q-card-actions class="q-mx-sm q-mb-sm" align="left">
              <q-btn size="16px" rounded :disabled="!(new_party && new_role)" @click="addPartyToAgreement"  outline dense label="Save"  class="text-capitalize" color="primary" />
            </q-card-actions>
          </q-card>
        </q-dialog>
        <q-dialog v-model="add_payment">
          <q-card class="detail_cls q-px-none q-pt-sm" style="width: 600px">
            <q-card-section>
            <div class="row q-px-sm">
                <div class="col-10">
                    <div class="text-h5">Add Payment</div>
                </div>
                <div class="col-2 text-right">
                    <q-icon v-close-popup style="font-size:18px;" name="close" class="text-weight-bold cursor-pointer"></q-icon>
                </div>
            </div>
            </q-card-section>

            <q-separator class="q-mx-none"></q-separator>

            <q-card-section style="font-size: 16px" class="q-pt-none q-mx-sm">
                            <q-select rounded
                                label="Payment Method"
                                dense
                                outlined
                                v-model="new_payment_method"
                                use-input
                                :class="!$q.dark.isActive?'bg-white':''"
                                input-debounce="0"
                                option-value="paymentMethodId"
                                option-label="label"
                                :options="payment_options"
                                @filter="filterFnPaymentMethod"
                              >
                                <template v-slot:no-option>
                                  <q-item>
                                    <q-item-section class="text-grey">
                                      No results
                                    </q-item-section>
                                  </q-item>
                                </template>
                              </q-select>
                              <div class="q-mt-sm q-pt-sm">
                                  <q-input label="Amount" rounded v-model="new_payment_method_amount" outlined style="" dense />
                              </div>
            </q-card-section>

            <q-card-actions class="q-mx-sm q-mb-sm" align="left">
              <q-btn size="16px" rounded :disabled="!(new_payment_method)" @click="checkPaymentAmount"  outline dense label="Add"  class="text-capitalize" color="primary" />
            </q-card-actions>
          </q-card>
        </q-dialog>
        <q-dialog v-model="add_item">
          <q-card class="detail_cls q-px-none q-pt-sm" style="min-width: 700px">
            <q-card-section>
            <div class="row q-px-sm">
                <div class="col-10">
                    <div class="text-h5">Add Product</div>
                </div>
                <div class="col-2 text-right">
                    <q-icon v-close-popup style="font-size:18px;" name="close" class="text-weight-bold cursor-pointer"></q-icon>
                </div>
            </div>
            </q-card-section>

            <q-separator class="q-mx-none"></q-separator>

            <q-card-section style="font-size: 16px" class="q-pt-none q-mx-sm">
                <q-select rounded
                        label="Asset Class"
                        dense
                        outlined
                        v-model="new_asset_class"
                        use-input
                        input-debounce="700"
                        :class="!$q.dark.isActive?'bg-white':''"
                        option-value="enumId"
                        option-label="description"
                        :options="asses_classes"
                        @filter="filterFnAssetClasses"
                      >
                        <template v-slot:no-option>
                          <q-item>
                            <q-item-section class="text-grey">
                              No results
                            </q-item-section>
                          </q-item>
                        </template>
                      </q-select>
                      <div class="q-mt-sm q-pt-sm">
                        <q-select rounded
                            label="Product*"
                            dense
                            outlined
                            v-model="new_product"
                            use-input
                            input-debounce="700"
                            :class="!$q.dark.isActive?'bg-white':''"
                            option-value="value"
                            option-label="label"
                            :options="product_options"
                            @filter="filterFnProduct"
                            @input="getProductPrice"
                          >
                            <template v-slot:no-option>
                              <q-item>
                                <q-item-section class="text-grey">
                                  No results
                                </q-item-section>
                              </q-item>
                            </template>
                          </q-select>
                        </div>
                    <div class="q-mt-sm q-pt-sm">
                        <q-input @input="getProductPrice" input-debounce="700" label="Quantity" rounded v-model="new_order_item.quantity" outlined style="margin-top:8px;margin-bottom:8px;padding:0;" dense>
                        </q-input>
                    </div>
                    <div class="q-mt-sm q-pt-sm">
                        <q-input label="Price" rounded v-model="new_order_item.price" outlined style="margin-top:8px;margin-bottom:8px;padding:0;" dense>
                        </q-input>
                    </div>
                    <div class="q-mt-sm q-pt-sm">
                        <q-input readonly label="Calc Price" rounded v-model="new_product_calc_price" outlined style="margin-top:8px;margin-bottom:8px;padding:0;" dense>
                        </q-input>
                    </div>
                    <div class="row q-mt-sm q-pt-sm q-col-gutter-sm">
                        <div class="col-md-6 col-lg-6 col-xs-12 col-sm-12">
                              <q-input rounded label="Required By Date" outlined dense v-model="new_order_item.requiredByDate">
                                  <template v-slot:prepend>
                                    <q-icon name="event" class="cursor-pointer">
                                      <q-popup-proxy transition-show="scale" transition-hide="scale">
                                        <q-date v-model="new_order_item.requiredByDate" mask="YYYY-MM-DD HH:mm">
                                          <div class="row items-center justify-end">
                                            <q-btn v-close-popup label="Close" color="primary" flat />
                                          </div>
                                        </q-date>
                                      </q-popup-proxy>
                                    </q-icon>
                                  </template>

                                  <template v-slot:append>
                                    <q-icon name="access_time" class="cursor-pointer">
                                      <q-popup-proxy transition-show="scale" transition-hide="scale">
                                        <q-time v-model="new_order_item.requiredByDate" mask="YYYY-MM-DD HH:mm" format24h>
                                          <div class="row items-center justify-end">
                                            <q-btn v-close-popup label="Close" color="primary" flat />
                                          </div>
                                        </q-time>
                                      </q-popup-proxy>
                                    </q-icon>
                                  </template>
                                </q-input>
                          </div>
                          <div class="col-md-6 col-lg-6 col-xs-12 col-sm-12">
                            <q-select rounded
                            label="Item Type*"
                            dense
                            outlined
                            v-model="item_type"
                            use-input
                            input-debounce="700"
                            :class="!$q.dark.isActive?'bg-white':''"
                            option-value="value"
                            option-label="label"
                            :options="item_options"
                            @filter="filterFnItemType"
                          >
                            <template v-slot:no-option>
                              <q-item>
                                <q-item-section class="text-grey">
                                  No results
                                </q-item-section>
                              </q-item>
                            </template>
                          </q-select>
                          </div>
                    </div>
            </q-card-section>

            <q-card-actions class="q-mx-sm q-mb-sm" align="left">
              <q-btn size="16px" rounded :disabled="!(new_product && item_type)" @click="addProductItem"  outline dense label="Add"  class="text-capitalize" color="primary" />
            </q-card-actions>
          </q-card>
        </q-dialog>
        <q-dialog v-model="change_ship_party">
          <q-card class="detail_cls q-px-none q-pt-sm" style="width: 600px">
            <q-card-section>
            <div class="row q-px-sm">
                <div class="col-10">
                    <div class="text-h5">Change Ship To</div>
                </div>
                <div class="col-2 text-right">
                    <q-icon v-close-popup style="font-size:18px;" name="close" class="text-weight-bold cursor-pointer"></q-icon>
                </div>
            </div>
            </q-card-section>

            <q-separator class="q-mx-none"></q-separator>

            <q-card-section style="font-size: 16px" class="q-mt-sm q-mx-sm">
                            <q-select rounded
                                label="Party"
                                dense
                                outlined
                                v-model="change_ship_to_party"
                                use-input
                                :class="!$q.dark.isActive?'bg-white':''"
                                input-debounce="0"
                                option-value="value"
                                option-label="label"
                                :options="account_options"
                                @filter="filterFnAccount"
                              >
                                <template v-slot:no-option>
                                  <q-item>
                                    <q-item-section class="text-grey">
                                      No results
                                    </q-item-section>
                                  </q-item>
                                </template>
                              </q-select>
            </q-card-section>

            <q-card-actions class="q-mx-sm q-mb-sm" align="left">
              <q-btn size="16px" rounded :disabled="!(change_ship_to_party)" @click="updateShipToParty"  outline dense label="Update"  class="text-capitalize" color="primary" />
            </q-card-actions>
          </q-card>
        </q-dialog>
        <q-dialog v-model="change_bill_party">
          <q-card class="detail_cls q-px-none q-pt-sm" style="width: 600px">
            <q-card-section>
            <div class="row q-px-sm">
                <div class="col-10">
                    <div class="text-h5">Change Bill To</div>
                </div>
                <div class="col-2 text-right">
                    <q-icon v-close-popup style="font-size:18px;" name="close" class="text-weight-bold cursor-pointer"></q-icon>
                </div>
            </div>
            </q-card-section>

            <q-separator class="q-mx-none"></q-separator>

            <q-card-section style="font-size: 16px" class="q-mt-sm q-mx-sm">
                            <q-select rounded
                                label="Party"
                                dense
                                outlined
                                v-model="change_bill_to_party"
                                use-input
                                :class="!$q.dark.isActive?'bg-white':''"
                                input-debounce="0"
                                option-value="value"
                                option-label="label"
                                :options="account_options"
                                @filter="filterFnAccount"
                              >
                                <template v-slot:no-option>
                                  <q-item>
                                    <q-item-section class="text-grey">
                                      No results
                                    </q-item-section>
                                  </q-item>
                                </template>
                              </q-select>
            </q-card-section>

            <q-card-actions class="q-mx-sm q-mb-sm" align="left">
              <q-btn size="16px" rounded :disabled="!(change_bill_to_party)" @click="updateBillToParty"  outline dense label="Update"  class="text-capitalize" color="primary" />
            </q-card-actions>
          </q-card>
        </q-dialog>

        <q-dialog v-model="modal_place_warning">
          <q-card class="detail_cls q-px-none q-pt-sm" style="width: 600px">
            <q-card-section>
            <div class="row q-px-sm">
                <div class="col-10">
                    <div class="text-h5">Place Warnings</div>
                </div>
                <div class="col-2 text-right">
                    <q-icon v-close-popup style="font-size:18px;" name="close" class="text-weight-bold cursor-pointer"></q-icon>
                </div>
            </div>
            </q-card-section>

            <q-separator class="q-mx-none"></q-separator>

            <q-card-section style="font-size: 16px;padding-bottom: 0px;" class="q-mt-sm q-mx-sm">
                 <div class="q-pb-sm" v-for="item in place_warnings_list"> {{ item }}</div>
            </q-card-section>

            <q-card-actions class="q-mx-sm q-mb-sm" align="left">
              <q-btn size="16px" rounded @click="placeOrder" outline dense label="Place Order Anyway"  class="text-capitalize" color="primary" />
            </q-card-actions>

          </q-card>
        </q-dialog>

        <q-dialog v-model="select_bill_to_address">
          <q-card class="detail_cls q-px-none q-pt-sm" style="min-width: 700px">
            <q-card-section>
            <div class="row q-px-sm">
                <div class="col-10">
                    <div class="text-h5">Select Address</div>
                </div>
                <div class="col-2 text-right">
                    <q-icon v-close-popup style="font-size:18px;" name="close" class="text-weight-bold cursor-pointer"></q-icon>
                </div>
            </div>
            </q-card-section>

            <q-separator class="q-mx-none"></q-separator>

            <q-card-section style="font-size: 16px" class="q-mt-sm q-mx-sm">
                            <q-select rounded
                                label="Billing Address"
                                dense
                                outlined
                                v-model="bill_to_address"
                                use-input
                                :class="!$q.dark.isActive?'bg-white':''"
                                input-debounce="0"
                                option-value="value"
                                option-label="label"
                                :options="postal_address_list"
                                @filter="filterFnBillAddress"
                              >
                                <template v-slot:no-option>
                                  <q-item>
                                    <q-item-section class="text-grey">
                                      No results
                                    </q-item-section>
                                  </q-item>
                                </template>
                              </q-select>
            </q-card-section>

            <q-card-actions class="q-mx-sm q-mb-sm" align="left">
              <q-btn size="16px" rounded  @click="setBillingAddress" :disabled="!(bill_to_address)" outline dense label="Set Billing Address"  class="text-capitalize" color="primary" />
            </q-card-actions>
          </q-card>
        </q-dialog>

        <q-dialog v-model="select_ship_to_address">
          <q-card class="detail_cls q-px-none q-pt-sm" style="min-width: 700px">
            <q-card-section>
            <div class="row q-px-sm">
                <div class="col-10">
                    <div class="text-h5">Select Address</div>
                </div>
                <div class="col-2 text-right">
                    <q-icon v-close-popup style="font-size:18px;" name="close" class="text-weight-bold cursor-pointer"></q-icon>
                </div>
            </div>
            </q-card-section>

            <q-separator class="q-mx-none"></q-separator>

            <q-card-section style="font-size: 16px" class="q-mt-sm q-mx-sm">
                            <q-select rounded
                                label="Shipping Address"
                                dense
                                outlined
                                v-model="ship_to_address"
                                use-input
                                :class="!$q.dark.isActive?'bg-white':''"
                                input-debounce="0"
                                option-value="value"
                                option-label="label"
                                :options="postal_address_ship_to_list"
                                @filter="filterFnShipAddress"
                              >
                                <template v-slot:no-option>
                                  <q-item>
                                    <q-item-section class="text-grey">
                                      No results
                                    </q-item-section>
                                  </q-item>
                                </template>
                              </q-select>
            </q-card-section>

            <q-card-actions class="q-mx-sm q-mb-sm" align="left">
              <q-btn size="16px" rounded  @click="setShipToAddress" :disabled="!(ship_to_address)" outline dense label="Set Ship To Address"  class="text-capitalize" color="primary" />
            </q-card-actions>
          </q-card>
        </q-dialog>

        <q-dialog v-model="add_dialog">
          <q-card class="detail_cls q-px-none q-pt-sm" style="min-width: 700px">
            <q-card-section>
            <div class="row q-px-sm">
                <div class="col-10">
                    <div class="text-h5">Add</div>
                </div>
                <div class="col-2 text-right">
                    <q-icon v-close-popup style="font-size:18px;" name="close" class="text-weight-bold cursor-pointer"></q-icon>
                </div>
            </div>
            </q-card-section>

            <q-separator class="q-mx-none"></q-separator>

            <q-card-section style="font-size: 16px" class="q-pt-none q-mx-sm">

                    <div class="q-mt-sm q-pt-sm">
                        <q-input label="To Name" rounded v-model="obj_add.to_name" outlined style="margin-top:8px;margin-bottom:8px;padding:0;" dense>
                        </q-input>
                    </div>
                    <div class="q-mt-sm q-pt-sm">
                        <q-input label="Attention" rounded v-model="obj_add.attention" outlined style="margin-top:8px;margin-bottom:8px;padding:0;" dense>
                        </q-input>
                    </div>
                    <div class="row q-mt-sm q-pt-sm">
                        <div class="col-8">
                                <div class="float-left q-pt-md q-pr-sm">Address 1</div>
                            <q-input class="float-left" rounded v-model="obj_add.address_1" outlined style="margin-top:8px;margin-bottom:8px;padding:0;width: 80%;" dense>
                            </q-input>
                        </div>
                        <div class="col-4">
                               <div class="float-left q-pt-md q-pl-md q-pr-sm">Unit</div>
                            <q-input class="float-left" rounded v-model="obj_add.unit" outlined style="margin-top:8px;margin-bottom:8px;padding:0;width:162px;" dense>
                            </q-input>
                        </div>
                    </div>
                    <div class="q-mt-sm q-pt-sm">
                        <q-input label="Address 2" rounded v-model="obj_add.address_2" outlined style="" dense>
                        </q-input>
                    </div>

                    <div class="q-mt-sm q-pt-md">
                        <div class="row">
                            <div class="col-1 q-pt-xs q-mt-xs">City/Zip</div>
                            <div class="col-3 q-pl-sm">
                                <q-input rounded v-model="obj_add.city"  outlined style="margin:0;padding:0;" label="" dense>
                                <q-tooltip anchor="bottom middle" self="top middle">City</q-tooltip></q-input>
                            </div>
                            <div class="col-2 q-pl-sm">
                                <q-input rounded v-model="obj_add.postal_code"  outlined style="margin:0;padding:0;" label="" dense>
                                <q-tooltip anchor="bottom middle" self="top middle">Zip/Postal Code</q-tooltip>
                                </q-input>
                            </div>
                            <div class="col-2" style="display:flex">
                                <span class="q-pt-sm q-px-sm">-</span><q-input rounded v-model="obj_add.postal_code_external" outlined style="margin:0;padding:0;width:70px;" label="" dense>
                                    <q-tooltip anchor="bottom middle" self="top middle">Zip/Postal Code External</q-tooltip>
                                </q-input>
                            </div>
                        </div>
                    </div>

                    <div class="q-mt-sm q-pt-md">
                        <div class="row">
                            <div class="col-2 q-pt-xs q-mt-xs">Country/State</div>
                            <div class="col-4 q-pl-sm">
                                <q-select rounded
                                    label="Country"
                                    dense
                                    outlined
                                    v-model="obj_add.country"
                                    use-input
                                    input-debounce="700"
                                    :class="!$q.dark.isActive?'bg-white':''"
                                    input-debounce="0"
                                    option-value="value"
                                    option-label="label"
                                    :options="country_options"
                                    @filter="filterFnCountry"
                                    @input="changeCountry"
                                  >
                                    <template v-slot:no-option>
                                      <q-item>
                                        <q-item-section class="text-grey">
                                          No results
                                        </q-item-section>
                                      </q-item>
                                    </template>
                              </q-select>
                            </div>
                            <div class="col-4 q-pl-sm">
                                <q-select rounded
                                    label="State"
                                    dense
                                    outlined
                                    v-model="obj_add.state"
                                    use-input
                                    input-debounce="700"
                                    :class="!$q.dark.isActive?'bg-white':''"
                                    input-debounce="0"
                                    option-value="value"
                                    option-label="label"
                                    :options="state_options"
                                    @filter="filterFnState"
                                  >
                                    <template v-slot:no-option>
                                      <q-item>
                                        <q-item-section class="text-grey">
                                          No results
                                        </q-item-section>
                                      </q-item>
                                    </template>
                              </q-select>
                            </div>
                        </div>
                    </div>

                    <div class="q-mt-sm q-pt-md">
                        <div class="row">
                            <div class="col-1 q-pt-xs q-mt-xs">Phone</div>
                            <div class="col-11">
                                <div class="float-left q-pt-xs q-mt-xs">+&nbsp;</div>
                                    <div class="float-left">
                                     <q-input rounded v-model="obj_add.country_code" outlined style="margin:0;padding:0;width:120px" label="Country Code" dense>
                                    </q-input>
                               </div>

                               <div class="float-left q-pt-xs q-mt-xs">&nbsp;&nbsp;-&nbsp;</div>
                                   <div class="float-left">
                                        <q-input rounded class="q-pl-sm" v-model="obj_add.area_code"  outlined style="margin:0;padding:0;width:120px" label="Area Code" dense>
                                        </q-input>
                                   </div>

                                    <div class="float-left q-pt-xs q-mt-xs">&nbsp;&nbsp;-&nbsp;</div>
                                   <div class="float-left">
                                        <q-input rounded class="q-pl-sm" v-model="obj_add.phone"  outlined style="margin:0;padding:0;width:190px" label="Phone Number" dense>
                                        </q-input>
                                   </div>
                                   <div class="float-left ">
                                        <div class="float-left q-pt-xs q-mt-xs">&nbsp;&nbsp;x&nbsp;</div>
                                        <q-input rounded class="q-pl-sm" v-model="obj_add.extension" outlined style="margin:0;padding:0;width:50px" dense>
                                        <q-tooltip anchor="bottom middle" self="top middle">Extension</q-tooltip>
                                        </q-input>
                                   </div>
                            </div>

                        </div>
                    </div>

                    <div class="q-mt-sm q-pt-sm">
                        <q-input label="Email" rounded v-model="obj_add.email" outlined style="" dense>
                        </q-input>
                    </div>

            </q-card-section>

            <q-card-actions class="q-mx-sm q-mb-sm" align="left">
              <q-btn size="16px" rounded @click="storeContactInfo"  outline dense label="Save"  class="text-capitalize" color="primary" />
            </q-card-actions>
          </q-card>
        </q-dialog>
        <q-dialog v-model="confirm_amount" persistent>
          <q-card style="max-width: 450px" class="q-pa-md">
            <q-card-section class="row items-center">
              <q-avatar icon="info" color="blue" text-color="white"></q-avatar>
              <span class="q-ml-sm q-mt-md text-medium" style="font-size: 18px;">If you add this payment, you are going to exceed order grand total. Are you sure you want to add this payment?</span>
            </q-card-section>

            <q-card-actions align="right">
              <q-btn no-caps rounded outline label="Cancel" color="grey" v-close-popup></q-btn>
              <q-btn no-caps rounded outline label="Add" color="primary" @click="addPayment"></q-btn>
            </q-card-actions>
          </q-card>
        </q-dialog>
    </div>
</template>
<script>
module.exports = {
    data: function () {
        return {
            confirm_amount: false,
            order_part_info: {},
            part_payment_info_list: [],
            order_part: {},
            status_item: {},
            order_grand_total: "",
            order_grand_total_main: 0,
            order_header: {},
            customer_bill_to_detail: {},
            customer_ship_to_detail: {},
            order_part_contact_mech: {},
            order_part_ship_to_mech: {},
            transacting_entity:"",
            new_product_calc_price:"",
            order_detail: {status:'Open (Tentative)', created:'2022-10-09',grand_total:' ',effective_date:'',end_date:'',part_name:' '},
            add_party: false,
            add_payment: false,
            add_item: false,
            select_bill_to_address: false,
            select_ship_to_address: false,
            bill_to_address: null,
            ship_to_address: null,
            asses_classes: [],
            asses_classes_master: [],
            payment_options_master: [],
            payment_options: [],
            new_order_item: {},
            new_party: null,
            new_product: null,
            change_bill_to_party: null,
            change_ship_to_party: null,
            change_ship_party: false,
            change_bill_party: false,
            bill_to_party_det: {},
            new_role: null,
            agreement_detail_cur_uom: null,
            agreement_detail_org_party: null,
            new_payment_method: null,
            new_payment_method_amount: null,
            organization_options_master: [],
            agreement_parties: [],
            pagination_order_items: {
                page: 0,
                rowsPerPage: 0
              },
            postal_addresses_master: [],
            postal_address_ship_to_list: [],
            postal_address_ship_to_list_master: [],
            ship_to_address_list_master: [],
            item_options: [],
            item_options_master: [],
            organization_options: [],
            currency_options_master: [],
            currency_options: [],
            role_options_master: [],
            role_options: [],
            pagination: {
                page: 0,
                rowsPerPage: 0
              },
            account_options:[],
            product_options:[],
            agreement_terms: [],
            item_to_delete: {},
            selected_bill_to_address: {},
            selected_ship_to_address: {},
            order_detail_payment_terms:null,
            delete_order_item: false,
            delete_party_from_agreement: false,
            new_asset_class: null,
            item_type: null,
            order_items_list:[],
            order_items_columns: [{ name: 'product',align:'left', label: 'Product', field: 'product_name' },
                                      { name: 'type',align:'left', label: 'Type', field: 'item_type_name' },
                                      { name: 'description',align:'left', label: 'Description', field: 'itemDescription' },
                                      { name: 'list_price',align:'left', label: 'List Price', field: 'unitListPrice' },
                                      { name: 'price', align:'left', label: 'Price', field: 'unitAmount' },
                                      { name: 'quantity', align:'left', label: 'Quantity', field: 'quantity' },
                                      { name: 'action',align:'right', label: 'Action', field: '', sortable: false },
                                      ],
          postal_address_list_master: [],
          postal_address_list: [],
          payment_terms_options_master:[],
          payment_terms_options:[],
          state_options_master:[],
          state_options:[],
          country_options_master:[],
          country_options:[],
          add_dialog:false,
          add_which: "",
          obj_add:{
                        to_name:' ',
                        attention:' '
                    },
          modal_place_warning: false,
          place_warnings_list: []
        }
    },
    methods: {
            filterFnPaymentTerms (val, update) {
                let self = this;
                  if (val === '') {
                    update(() => {
                      this.payment_terms_options = self.payment_terms_options_master
                    })
                    return
                  }
                  update(() => {
                      const needle = val.toLowerCase()
                      this.payment_terms_options = self.payment_terms_options_master.filter(v => v.description.toLowerCase().indexOf(needle) > -1)
                    })
              },
              filterFnCountry(val, update) {
                let self = this;
                  if (val === '') {
                    update(() => {
                      this.country_options = self.country_options_master
                    })
                    return
                  }
                  update(() => {
                      const needle = val.toLowerCase()
                      this.country_options = self.country_options_master.filter(v => v.label.toLowerCase().indexOf(needle) > -1)
                    })
              },
              filterFnState (val, update) {
                let self = this;
                  if (val === '') {
                    update(() => {
                      this.state_options = self.state_options_master
                    })
                    return
                  }
                  update(() => {
                      const needle = val.toLowerCase()
                      this.state_options = self.state_options_master.filter(v => v.label.toLowerCase().indexOf(needle) > -1)
                    })
              },
              filterFnAssetClasses (val, update) {
                let self = this;
                  if (val === '') {
                    update(() => {
                      this.asses_classes = self.asses_classes_master
                    })
                    return
                  }
                  update(() => {
                      const needle = val.toLowerCase()
                      this.asses_classes = self.asses_classes_master.filter(v => v.description.toLowerCase().indexOf(needle) > -1)
                    })
              },
              filterFnPaymentMethod (val, update) {
                let self = this;
                  if (val === '') {
                    update(() => {
                      this.payment_options = self.payment_options_master
                    })
                    return
                  }
                  update(() => {
                      const needle = val.toLowerCase()
                      this.payment_options = self.payment_options_master.filter(v => v.label.toLowerCase().indexOf(needle) > -1)
                    })
              },
              filterFnItemType (val, update) {
                let self = this;
                  if (val === '') {
                    update(() => {
                      this.item_options = self.item_options_master
                    })
                    return
                  }
                  update(() => {
                      const needle = val.toLowerCase()
                      this.item_options = self.item_options_master.filter(v => v.label.toLowerCase().indexOf(needle) > -1)
                    })
              },
              filterFnRole (val, update) {
                let self = this;
                  if (val === '') {
                    update(() => {
                      this.role_options = self.role_options_master
                    })
                    return
                  }
                  update(() => {
                      const needle = val.toLowerCase()
                      this.role_options = self.role_options_master.filter(v => v.description.toLowerCase().indexOf(needle) > -1)
                    })
              },
              filterFnProduct(val, update, abort) {
                    let self = this;
                    if (val.length < 2) {
                        abort()
                        return
                    }
                    if (val === '') {
                        update(() => {
                            self.product_options = [];
                        })
                        return
                    }
                    self.getProductList(val.toLowerCase()).then(function(resp){
                        update(() => {
                            self.product_options = resp.options;
                        })
                    });
                },
              async getProductList (search_keyword) {
                var self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                  get: (searchParams, prop) => searchParams.get(prop),
                });
                var allParms = {term: search_keyword ,orderId: params.orderId, pageIndex: 0, hasAllParms: true, moquiSessionToken:self.$root.moquiSessionToken };
                if (self.new_asset_class && self.new_asset_class.enumId) {
                    allParms["assetClassEnumId"] = self.new_asset_class.enumId;
                }
                return $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/agreement/getProductList", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError
                });
            },
            filterFnAccount(val, update, abort) {
                let self = this;
                if (val.length < 2) {
                    abort()
                    return
                }
                if (val === '') {
                    update(() => {
                        self.account_options = [];
                    })
                    return
                }
                self.searchPartyList(val.toLowerCase()).then(function(resp){
                    update(() => {
                        self.account_options = resp;
                    })
                });
            },
            searchPartyList (search_keyword) {
                var self = this;
                var allParms = $.extend({ moquiSessionToken:self.$root.moquiSessionToken, treeNodeId:'#' }, {});
                allParms["hasAllParms"] = true;
                allParms["pageIndex"] = 0;
                allParms["term"] = search_keyword;
                return $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/party/searchPartyList", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError
                });
            },
          filterFnTransactingEntity (val, update) {
            let self = this;
              if (val === '') {
                update(() => {
                  this.organization_options = self.organization_options_master
                })
                return
              }
              update(() => {
                  const needle = val.toLowerCase()
                  this.organization_options = self.organization_options_master.filter(v => v.label.toLowerCase().indexOf(needle) > -1)
                })
          },
          filterFnBillAddress (val, update) {
            let self = this;
              if (val === '') {
                update(() => {
                  this.postal_address_list = self.postal_address_list_master
                })
                return
              }
              update(() => {
                  const needle = val.toLowerCase()
                  this.postal_address_list = self.postal_address_list_master.filter(v => v.label.toLowerCase().indexOf(needle) > -1)
                })
          },
          filterFnShipAddress (val, update) {
            let self = this;
              if (val === '') {
                update(() => {
                  this.postal_address_ship_to_list = self.postal_address_ship_to_list_master
                })
                return
              }
              update(() => {
                  const needle = val.toLowerCase()
                  this.postal_address_ship_to_list = self.postal_address_ship_to_list_master.filter(v => v.label.toLowerCase().indexOf(needle) > -1)
                })
          },
          filterFnCurrency (val, update) {
            let self = this;
              if (val === '') {
                update(() => {
                  this.currency_options = self.currency_options_master
                })
                return
              }
              update(() => {
                  const needle = val.toLowerCase()
                  this.currency_options = self.currency_options.filter(v => v.uom_label.toLowerCase().indexOf(needle) > -1)
                })
          },
          formatDate (dt) {
                if (dt) {
                    dt = new Date(dt);
                    return dt.getFullYear() + "-" + String(dt.getMonth()+1).padStart(2, '0') + "-" + String(dt.getDate()).padStart(2, '0');
                }
            },
            getUOM () {
                var self = this;
                var allParms = { moquiSessionToken:self.$root.moquiSessionToken };
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/opportunity/getUOM", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.currency_options_master = resp.statusList.map(function(item){
                            item.uom_label = item.description + " [" + item.uomId + "]";
                            return item;
                        });
                        self.currency_options = JSON.parse(JSON.stringify(self.currency_options_master));
                    }
                });
            },
            updateAgreement () {
                var self = this;
                self.agreement_detail["moquiSessionToken"] = self.$root.moquiSessionToken;
                self.agreement_detail["organizationPartyId"] = self.agreement_detail_org_party.partyId;
                self.agreement_detail["currencyUomId"] = self.agreement_detail_cur_uom.uomId;
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/agreement/updateAgreement", headers:{Accept:'application/json'}, data:self.agreement_detail,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.$q.notify({
                            message: 'Updated successfully.',
                            position: 'bottom-left',
                          });
                    }
                });
            },
            confirmDelete (item) {
                var self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                                  get: (searchParams, prop) => searchParams.get(prop),
                                });
                self.item_to_delete = {};
                self.item_to_delete["moquiSessionToken"] = self.$root.moquiSessionToken;
                self.item_to_delete["orderId"] = item.orderId;
                self.item_to_delete["orderItemSeqId"] = item.orderItemSeqId;
                self.delete_order_item = true;
            },
            deleteItem() {
                let self = this;
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/orders/deleteItem", headers:{Accept:'application/json'}, data:self.item_to_delete,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.delete_order_item = false;
                        self.$q.notify({
                            message: 'Deleted successfully.',
                            position: 'bottom-left',
                          });
                        self.getOrderDetail();
                    }
                });
            },
            updateItem(item) {
                let self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                                  get: (searchParams, prop) => searchParams.get(prop),
                                });
                let item_to_update = JSON.parse(JSON.stringify(item));
                item_to_update["moquiSessionToken"] = self.$root.moquiSessionToken;
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/orders/updateItem", headers:{Accept:'application/json'}, data:item_to_update,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.delete_order_item = false;
                        self.$q.notify({
                            message: 'Updated successfully.',
                            position: 'bottom-left',
                          });
                        self.getOrderDetail();
                    }
                });
            },
            confirmRemoveAgreementParty (item) {
                var self = this;
                self.item_to_delete = {};
                self.item_to_delete["moquiSessionToken"] = self.$root.moquiSessionToken;
                self.item_to_delete["agreementId"] = item.agreementId;
                self.item_to_delete["partyId"] = item.partyId;
                self.item_to_delete["roleTypeId"] = item.roleTypeId;
                self.delete_party_from_agreement = true;
            },
            removeAgreementParty() {
                let self = this;
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/agreement/removeAgreementParty", headers:{Accept:'application/json'}, data:self.item_to_delete,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.$q.notify({
                            message: 'Removed party successfully.',
                            position: 'bottom-left',
                        });
                        self.delete_party_from_agreement = false;
                        self.item_to_delete = {};
                        self.getAgreementParties();
                    }
                });
            },
            splitByFirstOccurrence(str, separator) {
              var index = str.indexOf(separator);

              if (index !== -1) {
                var firstPart = str.slice(0, index);
                var secondPart = str.slice(index + 1);
                return secondPart.trim();
              }

              // If the separator is not found, return the original string as the first part and an empty string as the second part
              return str;
            },
            getOrderDetail() {
                var self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                  get: (searchParams, prop) => searchParams.get(prop),
                });
                var allParms = {orderId: params.orderId, moquiSessionToken:self.$root.moquiSessionToken };
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/orders/getSingle", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:async function(resp) {
                        self.order_part_info = resp.orderPartInfoList[0];
                        self.order_grand_total_main = (resp.orderHeader && resp.orderHeader?.grandTotal) ? resp.orderHeader?.grandTotal : 0;
                        self.part_payment_info_list = self.order_part_info.partPaymentInfoList.map(function(item){
                            item["bank_details"] = (item.bankAccount?(item.bankAccount.bankName||''):'');
                            if (item.postalAddress) {
                                item["address"] = (item.postalAddress?.address1 || "") + (item.postalAddress?.unitNumber ? (" #" + (item.postalAddress?.unitNumber || "")):"")
                                        + "<br>" + (item.postalAddress?.address2?item.postalAddress?.address2 + ", " : "") + (item.postalAddress?.city || "")
                                        + ", " + (item.postalAddressStateGeo && item.postalAddressStateGeo?.geoCodeAlpha2 ? item.postalAddressStateGeo?.geoCodeAlpha2 :
                                        (item.postalAddressStateGeo && item.postalAddressStateGeo?.geoName ? item.postalAddressStateGeo?.geoName:""))
                                        + " " + (item.postalAddress?.postalCode || "") + (item.postalAddress?.postalCodeExt ? ("-" +
                                        item.postalAddress?.postalCodeExt):"") + " " + (item.postalAddressCountryGeo?.geoCodeAlpha3 || "");
                            }
                            return item;
                        });
                        self.order_part = self.order_part_info.orderPart;
                        self.status_item = resp.statusItem;
                        self.order_items_list = await Promise.all(resp.orderItemList.map(async function(item){
                            await self.getProductList(item.productId).then(function(resp){
                                if (resp.options.length > 0) {
                                    item["product_name"] = self.splitByFirstOccurrence(resp.options[0]["label"], ":")
                                }
                            }, Promise.resolve([]));

                            await self.getItemDetail(item.itemTypeEnumId).then(function(resp){
                                item["item_type_name"] = resp.itemType.description
                            }, Promise.resolve([]));

                            return item;
                        }));
                        self.place_warnings_list = resp.placeWarnings;
                        if (self.order_part_info.customerBillToDetail) {
                            self.customer_bill_to_detail = self.order_part_info.customerBillToDetail;
                        }
                        else {
                            self.customer_bill_to_detail = self.order_part_info.customerDetail;
                        }
                        if (self.order_part_info.customerShipToDetail) {
                            self.customer_ship_to_detail = self.order_part_info.customerShipToDetail;
                        }
                        else {
                            self.customer_ship_to_detail = self.order_part_info.customerDetail;
                        }
                        if (self.customer_ship_to_detail?.partyId){
                            self.getCurBillToContactMech(self.customer_bill_to_detail.partyId);
                            self.getPartyContactInfoList();
                        }
                        if (self.order_part_info.isCustomerInternalOrg) {
                            self.item_options_master = [{'label':'Inventory','value':'ItemInventory'},
                                                    {'label':'Fixed Asset','value':'ItemAsset'},
                                                    {'label':'Supplies','value':'ItemExpSupplies'}];
                        }
                        else {
                            self.item_options_master = [{'label':'Product','value':'ItemProduct'},
                                                    {'label':'Fixed Asset','value':'ItemAsset'},
                                                    {'label':'Rental Asset','value':'ItemRental'},
                                                    {'label':'Replacement','value':'ItemReplacement'}];
                        }
                        self.item_options = JSON.parse(JSON.stringify(self.item_options_master));
                        self.customerBillToDetail
                        self.getShippingDetails();
                        self.getPaymentTerms();
                        self.getPaymentMethods();
                    }
                });
            },
            getShippingDetails() {
                var self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                  get: (searchParams, prop) => searchParams.get(prop),
                });
                var allParms = {orderId: params.orderId, orderPartSeqId: self.order_part.orderPartSeqId, moquiSessionToken:self.$root.moquiSessionToken };
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/orders/getShippingDetails", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.order_header = resp.orderHeader;
                        self.order_header["created"] = self.formatDate(self.order_header.entryDate);
                        self.order_grand_total = resp.formattedGrandTotal;
                    }
                });
            },
            getRoleOptions () {
                var self = this;
                var allParms = {moquiSessionToken:self.$root.moquiSessionToken };
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/agreement/getRoleOptions", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.role_options_master = resp.roleList;
                        self.role_options = JSON.parse(JSON.stringify(self.role_options_master));
                    }
                });
            },
            addPartyToAgreement () {
                var self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                  get: (searchParams, prop) => searchParams.get(prop),
                });
                var allParms = {moquiSessionToken:self.$root.moquiSessionToken, agreementId: params.agreementId,
                        partyId: self.new_party.value, roleTypeId: self.new_role.roleTypeId};
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/agreement/addAgreementParty", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.new_party = null;
                        self.new_role = null;
                        self.add_party = false;
                        self.getAgreementParties();
                        self.$q.notify({
                            message: 'Party added successfully.',
                            position: 'bottom-left',
                          });
                    }
                });
            },
            updateBillToParty () {
                var self = this;
                var allParms = {orderId: self.order_part.orderId, orderPartSeqId: self.order_part.orderPartSeqId,moquiSessionToken:self.$root.moquiSessionToken,
                        newBillToPartyId: self.change_bill_to_party.value, currentBillToPartyId: self.customer_bill_to_detail?.partyId};
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/orders/updateBillToParty", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.change_bill_to_party = null;
                        self.change_bill_party = false;
                        self.getOrderDetail();
                        self.$q.notify({
                            message: 'Changed successfully.',
                            position: 'bottom-left',
                          });
                    }
                });
            },
            getPartyContactInfo (party_id) {
                var self = this;
                self.postal_address_list = [];
                self.postal_addresses_master = [];
                self.postal_address_list_master = [];
                self.selected_bill_to_address = {};
                var allParms = {postalContactMechPurposeId: 'PostalBilling',moquiSessionToken:self.$root.moquiSessionToken, partyId: party_id};
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/party/getContactInfoList", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        if (resp.postalAddressList) {
                            self.postal_addresses_master = resp.postalAddressList;
                            resp.postalAddressList.forEach(function(item){
                                let label = (item.postalAddress.toName || "") + " - " + (item.postalAddress.attnName || "")
                                        + " - " + (item.postalAddress.address1 || "") + (item.postalAddress.unitNumber ? (" #" + (item.postalAddress.unitNumber || "")):"")
                                        + ", " + (item.postalAddress.address2 || "") + ", " + (item.postalAddress.city || "")
                                        + ", " + (item.postalAddressStateGeo && item.postalAddressStateGeo?.geoCodeAlpha2 ? item.postalAddressStateGeo?.geoCodeAlpha2 :
                                        (item.postalAddressStateGeo && item.postalAddressStateGeo.geoName ? item.postalAddressStateGeo.geoName:""))
                                        + " " + (item.postalAddress.postalCode || "") + (item.postalAddress.postalCodeExt ? ("-" +
                                        item.postalAddress.postalCodeExt):"") + " " + (item.postalAddressCountryGeo?.geoCodeAlpha3 || "");
                                self.postal_address_list.push({label: label, value: item.postalContactMechId});
                                return item;
                            });
                            self.postal_address_list_master = JSON.parse(JSON.stringify(self.postal_address_list));
                            if (self.order_part_contact_mech && self.order_part_contact_mech.contactMechId) {
                                self.selected_bill_to_address = self.postal_addresses_master.find(function(item){
                                    item["add_last_line"] = (item.postalAddress.city || "") + ", " + (item.postalAddressStateGeo && item.postalAddressStateGeo?.geoCodeAlpha2 ? item.postalAddressStateGeo?.geoCodeAlpha2 :
                                        (item.postalAddressStateGeo && item.postalAddressStateGeo.geoName ? item.postalAddressStateGeo.geoName:""))
                                        + " " + (item.postalAddress.postalCode || "") + (item.postalAddress.postalCodeExt ? ("-" +
                                        item.postalAddress.postalCodeExt):"") + " " + (item.postalAddressCountryGeo?.geoCodeAlpha3 || "")
                                    return item.postalContactMechId === self.order_part_contact_mech.contactMechId
                                })
                            }
                        }
                    }
                });
            },
            getCurBillToContactMech(partyId) {
                var self = this;
                self.postal_address_list = [];
                self.postal_addresses_master = [];
                self.postal_address_list_master = [];
                self.selected_bill_to_address = {};
                var allParms = {postalContactMechPurposeId: 'PostalBilling',moquiSessionToken:self.$root.moquiSessionToken, orderId: self.order_part.orderId,
                    orderPartSeqId: self.order_part.orderPartSeqId};
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/orders/getCurBillToContactMech", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.order_part_contact_mech = resp.orderPartContactMech;
                        self.getPartyContactInfo(partyId);
                    }
                });
            },
            getPartyContactInfoList(postalContactMechId) {
                var self = this;
                self.postal_address_ship_to_list = [];
                self.postal_address_ship_to_list_master = [];
                self.ship_to_address_list_master = [];
                var allParms = {postalContactMechPurposeId: 'PostalShippingDest',moquiSessionToken:self.$root.moquiSessionToken, partyId: self.customer_ship_to_detail?.partyId,
                    orderPartSeqId: self.order_part.orderPartSeqId};
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/orders/getPartyContactInfoList", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        if (resp.postalAddressList) {
                            self.ship_to_address_list_master = resp.postalAddressList;
                            resp.postalAddressList.forEach(function(item){
                                let label = (item.postalAddress.toName || "") + " - " + (item.postalAddress.attnName || "")
                                        + " - " + (item.postalAddress.address1 || "") + (item.postalAddress.unitNumber ? (" #" + (item.postalAddress.unitNumber || "")):"")
                                        + ", " + (item.postalAddress.address2 || "") + ", " + (item.postalAddress.city || "")
                                        + ", " + (item.postalAddressStateGeo?.geoCodeAlpha2 ? item.postalAddressStateGeo?.geoCodeAlpha2 :
                                        (item.postalAddressStateGeo && item.postalAddressStateGeo.geoName ? item.postalAddressStateGeo.geoName:""))
                                        + " " + (item.postalAddress.postalCode || "") + (item.postalAddress.postalCodeExt ? ("-" +
                                        item.postalAddress.postalCodeExt):"") + " " + (item.postalAddressCountryGeo?.geoCodeAlpha3 || "");
                                self.postal_address_ship_to_list.push({label: label, value: item.postalContactMechId});
                                return item;
                            });
                            self.postal_address_ship_to_list_master = JSON.parse(JSON.stringify(self.postal_address_ship_to_list));
                        }
                        if (postalContactMechId) {
                            self.getCurShipToInfo(postalContactMechId);
                        }
                        else {
                            self.getCurShipToInfo();
                        }
                    }
                });
            },
            getCurShipToInfo(postalContactMechId) {
                var self = this;
                self.selected_ship_to_address = {};
                var allParms = {moquiSessionToken:self.$root.moquiSessionToken, partyId: self.customer_bill_to_detail.partyId,
                    orderPartSeqId: self.order_part.orderPartSeqId};
                if (postalContactMechId) {
                    allParms["postalContactMechId"] = postalContactMechId;
                }
                else {
                    allParms["postalContactMechId"] = self.order_part.postalContactMechId;
                }
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/orders/getCurShipToInfo", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.selected_ship_to_address = self.ship_to_address_list_master.find(function(item){
                            item["add_last_line"] = (item.postalAddress.city || "") + ", " + (item.postalAddressStateGeo?.geoCodeAlpha2 ? item.postalAddressStateGeo?.geoCodeAlpha2 :
                                (item.postalAddressStateGeo && item.postalAddressStateGeo.geoName ? item.postalAddressStateGeo.geoName:""))
                                + " " + (item.postalAddress.postalCode || "") + (item.postalAddress.postalCodeExt ? ("-" +
                                item.postalAddress.postalCodeExt):"") + " " + (item.postalAddressCountryGeo?.geoCodeAlpha3 || "")
                            return item.postalContactMechId === resp.postalContactMechId;
                        });

                    }
                });
            },
            setShipToAddress () {
                var self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                  get: (searchParams, prop) => searchParams.get(prop),
                });
                var allParms = {moquiSessionToken:self.$root.moquiSessionToken, orderId: self.order_part.orderId,
                        shippingPostalContactMechId: self.ship_to_address.value, orderPartSeqId: self.order_part.orderPartSeqId};
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/orders/setOrderBillingShippingInfo", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.selected_ship_to_address = self.ship_to_address_list_master.find(function(item){
                            item["add_last_line"] = (item.postalAddress.city || "") + ", " + (item.postalAddressStateGeo?.geoCodeAlpha2 ? item.postalAddressStateGeo?.geoCodeAlpha2 :
                                (item.postalAddressStateGeo && item.postalAddressStateGeo.geoName ? item.postalAddressStateGeo.geoName:""))
                                + " " + (item.postalAddress.postalCode || "") + (item.postalAddress.postalCodeExt ? ("-" +
                                item.postalAddress.postalCodeExt):"") + " " + (item.postalAddressCountryGeo?.geoCodeAlpha3 || "")
                            return item.postalContactMechId === self.ship_to_address.value
                        });
                        self.select_ship_to_address = false;
                        self.ship_to_address = null;
                        self.$q.notify({
                            message: 'Saved successfully.',
                            position: 'bottom-left',
                          });
                    }
                });
            },
            setBillingAddress () {
                var self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                  get: (searchParams, prop) => searchParams.get(prop),
                });
                var allParms = {moquiSessionToken:self.$root.moquiSessionToken, orderId: self.order_part.orderId,
                        billToPostalContactMechId: self.bill_to_address.value, orderPartSeqId: self.order_part.orderPartSeqId};
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/orders/updateBillToContactMech", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.selected_bill_to_address = self.postal_addresses_master.find(function(item){
                            item["add_last_line"] = (item.postalAddress.city || "") + ", " + (item.postalAddressStateGeo?.geoCodeAlpha2 ? item.postalAddressStateGeo?.geoCodeAlpha2 :
                                (item.postalAddressStateGeo && item.postalAddressStateGeo.geoName ? item.postalAddressStateGeo.geoName:""))
                                + " " + (item.postalAddress.postalCode || "") + (item.postalAddress.postalCodeExt ? ("-" +
                                item.postalAddress.postalCodeExt):"") + " " + (item.postalAddressCountryGeo?.geoCodeAlpha3 || "")
                            return item.postalContactMechId === self.bill_to_address.value
                        })
                        self.select_bill_to_address = false;
                        self.bill_to_address = null;
                        self.$q.notify({
                            message: 'Saved successfully.',
                            position: 'bottom-left',
                          });
                    }
                });
            },
            updateShipToParty () {
                var self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                  get: (searchParams, prop) => searchParams.get(prop),
                });
                var allParms = {moquiSessionToken:self.$root.moquiSessionToken, orderId: params.orderId, orderPartSeqId: self.order_part.orderPartSeqId,
                newShipToPartyId: self.change_ship_to_party.value, currentShipToPartyId: self.customer_ship_to_detail?.partyId};
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/orders/updateShipToParty", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.change_ship_to_party = null;
                        self.change_ship_party = false;
                        self.getOrderDetail();
                    }
                });
            },
            getPaymentTerms () {
                var self = this;
                var allParms = {moquiSessionToken:self.$root.moquiSessionToken};
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/orders/getPaymentTerms", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.payment_terms_options_master = resp.termList;
                        self.payment_terms_options = JSON.parse(JSON.stringify(resp.termList));
                        self.order_detail_payment_terms = resp.termList.find(function(item){
                            return item.settlementTermId == self.order_part.settlementTermId
                        })

                    }
                });
            },
            getGeoCountries () {
                var self = this;
                self.country_options_master = [];
                self.country_options = [];
                var allParms = {moquiSessionToken:self.$root.moquiSessionToken};
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/orders/getGeoCountries", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        resp.geoList.map(function(item){
                            self.country_options_master.push({'label':item.geoName,'value':item.geoId})
                            self.country_options.push({'label':item.geoName,'value':item.geoId})
                            return item;
                        });
                    }
                });
            },
            changeCountry(new_item) {
                this.getGeoRegionsForDropDown(new_item.value);
            },
            getGeoRegionsForDropDown (country_id) {
                var self = this;
                self.state_options_master = [];
                self.state_options = [];
                var allParms = {moquiSessionToken:self.$root.moquiSessionToken, geoId: country_id};
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/orders/getGeoRegionsForDropDown", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        resp.resultList.map(function(item){
                            self.state_options_master.push({'label':item.geoName,'value':item.geoId})
                            self.state_options.push({'label':item.geoName,'value':item.geoId})
                            return item;
                        });
                    }
                });
            },
            updatePaymentTerms() {
                var self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                  get: (searchParams, prop) => searchParams.get(prop),
                });
                var allParms = {moquiSessionToken:self.$root.moquiSessionToken, orderId: params.orderId, orderPartSeqId: self.order_part.orderPartSeqId,
                settlementTermId: self.order_detail_payment_terms.settlementTermId};
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/orders/updateOrderPart", headers:{Accept:'application/json'}, data:allParms,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.$q.notify({
                            message: 'Updated successfully.',
                            position: 'bottom-left',
                          });
                    }
                });
            },
            storeContactInfo () {
                var self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                  get: (searchParams, prop) => searchParams.get(prop),
                });
                var allParams = {orderId: params.orderId, orderPartSeqId: self.order_part.orderPartSeqId, moquiSessionToken:self.$root.moquiSessionToken};

                allParams["toName"] = self.obj_add.to_name;
                allParams["attnName"] = self.obj_add.attention;
                allParams["address1"] = self.obj_add.address_1;
                allParams["unitNumber"] = self.obj_add.unit;
                allParams["address2"] = self.obj_add.address_2;
                allParams["city"] = self.obj_add.city;
                allParams["countryGeoId"] = self.obj_add.country ? self.obj_add.country.value : null;
                allParams["stateProvinceGeoId"] = self.obj_add.state ? self.obj_add.state.value : null;
                allParams["postalCode"] = self.obj_add.postal_code;
                allParams["postalCodeExt"] = self.obj_add.postal_code_external;
                allParams["countryCode"] = self.obj_add.country_code;
                allParams["areaCode"] = self.obj_add.area_code;
                allParams["contactNumber"] = self.obj_add.phone;
                allParams["telecomExtension"] = self.obj_add.extension;
                allParams["emailAddress"] = self.obj_add.email;
                if (self.add_which == "bill") {
                    allParams["postalContactMechPurposeId"] = 'PostalBilling';
                    allParams["telecomContactMechPurposeId"] = 'PhoneBilling';
                    allParams["emailContactMechPurposeId"] = 'EmailBilling';
                    allParams["partyId"] = self.customer_bill_to_detail?.partyId;
                }
                else {
                    allParams["postalContactMechPurposeId"] = 'PostalShippingDest';
                    allParams["telecomContactMechPurposeId"] = 'PhoneShippingDest';
                    allParams["emailContactMechPurposeId"] = 'EmailShippingDest';
                    allParams["partyId"] = self.customer_ship_to_detail?.partyId;
                }

                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/party/storeContactInfo", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.obj_add = {};
                        self.add_dialog = false;
                        if (self.add_which == "ship") {
                            self.getPartyContactInfoList(resp.postalContactMechId);
                        }
                        else {
                            self.getPartyContactInfo(self.customer_bill_to_detail.partyId);
                        }
                        self.$q.notify({
                            message: 'Added successfully.',
                            position: 'bottom-left',
                          });
                    }
                });
            },
            placeOrder () {
                var self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                  get: (searchParams, prop) => searchParams.get(prop),
                });
                var allParams = {orderId: params.orderId, orderPartSeqId: self.order_part.orderPartSeqId, moquiSessionToken:self.$root.moquiSessionToken};
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/orders/placeOrder", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.modal_place_warning=false;
                    }
                });
            },
            getAssetClasses () {
                var self = this;
                var allParams = {moquiSessionToken:self.$root.moquiSessionToken};
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/orders/getAssetClasses", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.asses_classes_master = resp.assetClassList;
                        self.asses_classes = JSON.parse(JSON.stringify(resp.assetClassList));
                    }
                });
            },
            getPaymentMethods () {
                var self = this;
                var allParams = {moquiSessionToken:self.$root.moquiSessionToken, customerBillToPartyId: self.customer_bill_to_detail.partyId};
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/orders/getPaymentMethods", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.payment_options_master = resp.paymentOptions.map(function(item){
                            item["label"] = item.typeDescription + " - " + (item.description||'') + (item.gatewayDescription ? (" - " + item.gatewayDescription):'');
                            return item;
                        });
                        self.payment_options = JSON.parse(JSON.stringify(self.payment_options_master));
                    }
                });
            },
            addProductItem () {
                var self = this;
                const params = new Proxy(new URLSearchParams(window.location.search), {
                  get: (searchParams, prop) => searchParams.get(prop),
                });
                var allParams = {quantity: self.new_order_item.quantity, unitAmount: self.new_order_item.price,
                    calcAmount: self.new_product_calc_price, calcAmount_display: "", updateExisting: false, requireInventory: false, orderId: params.orderId, orderPartSeqId: self.order_part.orderPartSeqId, moquiSessionToken:self.$root.moquiSessionToken};
                if (self.new_asset_class && self.new_asset_class.enumId) {
                    allParams["assetClassEnumId"] = self.new_asset_class.enumId;
                }
                if (self.new_product && self.new_product.value) {
                    allParams["productId"] = self.new_product.value;
                }
                if (self.new_order_item.requiredByDate) {
                    allParams["requiredByDate"] = self.new_order_item.requiredByDate
                }
                if (self.item_type && self.item_type.value) {
                    allParams["itemTypeEnumId"] = self.item_type.value;
                }
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/orders/addProductItem", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.add_item = false;
                        self.$q.notify({
                            message: 'Added successfully.',
                            position: 'bottom-left',
                          });
                        self.getOrderDetail();
                    }
                });
            },
            getProductPrice () {
                var self = this;
                if (!self.new_product || !self.new_order_item.quantity){
                    self.new_product_calc_price = "";
                }
                else {
                    const params = new Proxy(new URLSearchParams(window.location.search), {
                      get: (searchParams, prop) => searchParams.get(prop),
                    });
                    var allParams = {orderId: params.orderId, orderPartSeqId: self.order_part.orderPartSeqId, moquiSessionToken:self.$root.moquiSessionToken,
                        productId: self.new_product.value, quantity: self.new_order_item.quantity, hasAllParms: true};
                    $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/orders/getProductPrice", headers:{Accept:'application/json'}, data:allParams,
                        error:moqui.handleAjaxError, success:function(resp) {
                            self.new_product_calc_price = resp.productPrice;
                        }
                    });
                }
            },
            checkPaymentAmount() {
                let self = this;
                self.new_payment_method_amount;
                self.order_grand_total_main;
                let total_payment_amount = 0;
                self.part_payment_info_list.forEach(function(item){
                    total_payment_amount = total_payment_amount + ((item.partPayment && item.partPayment.amount) ? item.partPayment.amount:0);
                    return item;
                });
                if (self.new_payment_method_amount) {
                    console.log(parseFloat(total_payment_amount) + parseFloat(self.new_payment_method_amount));
                    let new_payment_amount = parseFloat(total_payment_amount) + parseFloat(self.new_payment_method_amount);
                    console.log(self.order_grand_total_main);
                    if (new_payment_amount > self.order_grand_total_main) {
                        self.confirm_amount = true;
                    }
                }
                else {
                    self.addPayment();
                }
            },
            addPayment () {
                let self = this;
                var allParams = {moquiSessionToken:self.$root.moquiSessionToken, orderId: self.order_part.orderId,
                    orderPartSeqId: self.order_part.orderPartSeqId, paymentMethodId:self.new_payment_method.paymentMethodId,
                    amount: self.new_payment_method_amount};
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/sales/orders/addOrderPartPayment", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.confirm_amount = false;
                        self.add_payment = false;
                        self.new_payment_method = null;
                        self.new_payment_method_amount = null;
                        self.$q.notify({
                            message: 'Added successfully.',
                            position: 'bottom-left',
                          });
                        self.getOrderDetail();
                    }
                });
            },
            getFormattedNumbers () {
                let self = this;
                var allParams = {moquiSessionToken:self.$root.moquiSessionToken,customerBillToPartyId: "100055", numberToFormat:"-9999", uomID: "USD"};
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/orders/getFormattedNumbers", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.add_payment = false;
                        self.new_payment_method = null;
                        //self.$q.notify({
                        //    message: 'Added successfully.',
                        //    position: 'bottom-left',
                        //  });
                        //self.getOrderDetail();
                    }
                });
            },
            async getItemDetail (itemTypeEnumId) {
                let self = this;
                var allParams = {moquiSessionToken:self.$root.moquiSessionToken, itemTypeEnumId:itemTypeEnumId};
                return $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/sales/orders/getItemDetail", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError
                });
            }
    },
    created: function () {
        this.getUOM();
        this.getOrderDetail();
        this.getGeoCountries();
        this.getGeoRegionsForDropDown();
        this.getAssetClasses();
        //this.getFormattedNumbers();
        //this.getItemDetail();
        //this.getAgreementItems();
        //this.getRoleOptions();
    },
}
</script>
<style>
    .q-field__label {
        top: 10px !important;
    }
    .q-field--float .q-field__label {
        top: 0px !important;
    }
    .custom_style {
        background: #ECF2FF !important;
    }
    .custom_radius {
        border-radius: 8px !important;
    }
    .correct_input_fields .q-field__label {
        background: transparent !important;
    }
    .correct_input_fields .q-field__input {
        background: transparent !important;
    }
    .correct_input_fields .q-field--float .q-field__label {
        background: grey !important;
        color: white !important;
        border-radius: 8px !important;
    }
    .custom_height_with_scroll {
        max-height: 155px;
        overflow-x: hidden !important;
        overflow-y: auto;
    }
</style>
